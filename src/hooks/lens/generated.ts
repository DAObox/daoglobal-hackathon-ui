// Generated by @wagmi/cli@0.1.15 on 4/20/2023 at 10:38:13 AM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LensVotingPlugin
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export const lensVotingPluginABI = [
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint64', type: 'uint64' },
      { name: 'actual', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'DateOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint64', type: 'uint64' },
      { name: 'actual', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'MinDurationOutOfBounds',
  },
  { type: 'error', inputs: [], name: 'NoVotingPower' },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ProposalCreationForbidden',
  },
  {
    type: 'error',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'ProposalExecutionForbidden',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'RatioOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'RatioOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
      {
        name: 'voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
    name: 'VoteCastForbidden',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'members',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'MembersAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'members',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'MembersRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'definingContract',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MembershipContractAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'endDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'allowFailureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'votingPower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingMode',
        internalType: 'enum MajorityVotingBase.VotingMode',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'supportThreshold',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'minParticipation',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'minDuration',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'minProposerVotingPower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotingSettingsUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_PLUGIN_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'canExecute',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_allowFailureMap', internalType: 'uint256', type: 'uint256' },
      { name: '_startDate', internalType: 'uint64', type: 'uint64' },
      { name: '_endDate', internalType: 'uint64', type: 'uint64' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'createProposal',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposal',
    outputs: [
      { name: 'open', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
      {
        name: 'parameters',
        internalType: 'struct MajorityVotingBase.ProposalParameters',
        type: 'tuple',
        components: [
          {
            name: 'votingMode',
            internalType: 'enum MajorityVotingBase.VotingMode',
            type: 'uint8',
          },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'startDate', internalType: 'uint64', type: 'uint64' },
          { name: 'endDate', internalType: 'uint64', type: 'uint64' },
          { name: 'snapshotBlock', internalType: 'uint64', type: 'uint64' },
          { name: 'minVotingPower', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'tally',
        internalType: 'struct MajorityVotingBase.Tally',
        type: 'tuple',
        components: [
          { name: 'abstain', internalType: 'uint256', type: 'uint256' },
          { name: 'yes', internalType: 'uint256', type: 'uint256' },
          { name: 'no', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'getVoteOption',
    outputs: [
      {
        name: '',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getVotingToken',
    outputs: [
      { name: '', internalType: 'contract IFollowNFT', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'contract IDAO', type: 'address' },
      {
        name: '_votingSettings',
        internalType: 'struct MajorityVotingBase.VotingSettings',
        type: 'tuple',
        components: [
          {
            name: 'votingMode',
            internalType: 'enum MajorityVotingBase.VotingMode',
            type: 'uint8',
          },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'minParticipation', internalType: 'uint32', type: 'uint32' },
          { name: 'minDuration', internalType: 'uint64', type: 'uint64' },
          {
            name: 'minProposerVotingPower',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
      { name: '_token', internalType: 'contract IFollowNFT', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isMinParticipationReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReachedEarly',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDuration',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minParticipation',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minProposerVotingPower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [
      { name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'supportThreshold',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotingPower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_votingSettings',
        internalType: 'struct MajorityVotingBase.VotingSettings',
        type: 'tuple',
        components: [
          {
            name: 'votingMode',
            internalType: 'enum MajorityVotingBase.VotingMode',
            type: 'uint8',
          },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'minParticipation', internalType: 'uint32', type: 'uint32' },
          { name: 'minDuration', internalType: 'uint64', type: 'uint64' },
          {
            name: 'minProposerVotingPower',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'updateVotingSettings',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'vote',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingMode',
    outputs: [
      {
        name: '',
        internalType: 'enum MajorityVotingBase.VotingMode',
        type: 'uint8',
      },
    ],
  },
] as const

/**
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export const lensVotingPluginAddress = {
  137: '0x7Abe9ba7fbD92d9b3774d80c4363B854A5fA5aC6',
} as const

/**
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export const lensVotingPluginConfig = {
  address: lensVotingPluginAddress,
  abi: lensVotingPluginABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LensVotingSetup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lensVotingSetupABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'TokenNotContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'TokenNotERC20',
  },
  {
    type: 'error',
    inputs: [{ name: 'length', internalType: 'uint256', type: 'uint256' }],
    name: 'WrongHelpersArrayLength',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'prepareInstallation',
    outputs: [
      { name: 'plugin', internalType: 'address', type: 'address' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUninstallation',
    outputs: [
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_currentBuild', internalType: 'uint16', type: 'uint16' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUpdate',
    outputs: [
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFollowNFT
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFollowNftABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address' },
      { name: 'delegatee', internalType: 'address', type: 'address' },
      {
        name: 'sig',
        internalType: 'struct DataTypes.EIP712Signature',
        type: 'tuple',
        components: [
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
          { name: 'deadline', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getDelegatedSupplyByBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'user', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPowerByBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'profileId', internalType: 'uint256', type: 'uint256' }],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'mint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822Proxiable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1271
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1271ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: 'magicValue', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const proxyABI = [
  { stateMutability: 'payable', type: 'fallback' },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822ProxiableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVotesUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVotesUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967ProxyABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: '_logic', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  { stateMutability: 'payable', type: 'fallback' },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967Upgrade
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeacon
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967UpgradeUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeaconUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EIP712Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const eip712UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165StorageUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165StorageUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DAO
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const daoABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'error',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'ActionFailed',
  },
  { type: 'error', inputs: [], name: 'AnyAddressDisallowedForWhoAndWhere' },
  { type: 'error', inputs: [], name: 'ConditionNotPresentForAnyAddress' },
  { type: 'error', inputs: [], name: 'InsufficientGas' },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NativeTokenDepositAmountMismatch',
  },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'currentCondition', internalType: 'address', type: 'address' },
      { name: 'newCondition', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionAlreadyGrantedForDifferentCondition',
  },
  { type: 'error', inputs: [], name: 'PermissionsForAnyAddressDisallowed' },
  { type: 'error', inputs: [], name: 'TooManyActions' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Unauthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: 'magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'UnkownCallback',
  },
  { type: 'error', inputs: [], name: 'ZeroAmount' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'sig', internalType: 'bytes4', type: 'bytes4', indexed: true },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'CallbackReceived',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_reference',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'callId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'failureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'execResults',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
    ],
    name: 'Executed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'permissionId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'where',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'condition',
        internalType: 'contract IPermissionCondition',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Granted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'MetadataSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'NativeTokenDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'daoURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'NewURI',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'permissionId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'where',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Revoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'signatureValidator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SignatureValidatorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'interfaceId',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'callbackSelector',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'magicNumber',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
    ],
    name: 'StandardCallbackRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'forwarder',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'TrustedForwarderSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  { stateMutability: 'nonpayable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXECUTE_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'REGISTER_STANDARD_CALLBACK_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ROOT_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SET_METADATA_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SET_SIGNATURE_VALIDATOR_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SET_TRUSTED_FORWARDER_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_DAO_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_items',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyMultiTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      {
        name: 'items',
        internalType: 'struct PermissionLib.SingleTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applySingleTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'daoURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_reference', internalType: 'string', type: 'string' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_callId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execute',
    outputs: [
      { name: 'execResults', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'failureMap', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTrustedForwarder',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'grant',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_condition',
        internalType: 'contract IPermissionCondition',
        type: 'address',
      },
    ],
    name: 'grantWithCondition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
      { name: '_initialOwner', internalType: 'address', type: 'address' },
      { name: '_trustedForwarder', internalType: 'address', type: 'address' },
      { name: 'daoURI_', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' },
      { name: '_callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: '_magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'registerStandardCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'revoke',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newDaoURI', internalType: 'string', type: 'string' }],
    name: 'setDaoURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_metadata', internalType: 'bytes', type: 'bytes' }],
    name: 'setMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_signatureValidator', internalType: 'address', type: 'address' },
    ],
    name: 'setSignatureValidator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_newTrustedForwarder',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'setTrustedForwarder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'signatureValidator',
    outputs: [{ name: '', internalType: 'contract IERC1271', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDAO
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const idaoABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_reference',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'actor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'callId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'failureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'execResults',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
    ],
    name: 'Executed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'MetadataSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'NativeTokenDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'signatureValidator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SignatureValidatorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'interfaceId',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'callbackSelector',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'magicNumber',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
    ],
    name: 'StandardCallbackRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'forwarder',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'TrustedForwarderSet',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: '_reference', internalType: 'string', type: 'string' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_callId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execute',
    outputs: [
      { name: '', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTrustedForwarder',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' },
      { name: '_callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: '_magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'registerStandardCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_metadata', internalType: 'bytes', type: 'bytes' }],
    name: 'setMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_signatureValidator', internalType: 'address', type: 'address' },
    ],
    name: 'setSignatureValidator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_trustedForwarder', internalType: 'address', type: 'address' },
    ],
    name: 'setTrustedForwarder',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPermissionCondition
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPermissionConditionABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: 'allowed', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEIP4824
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ieip4824ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'daoURI',
    outputs: [{ name: '_daoURI', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PermissionLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const permissionLibABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'NO_CONDITION',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PermissionManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const permissionManagerABI = [
  { type: 'error', inputs: [], name: 'AnyAddressDisallowedForWhoAndWhere' },
  { type: 'error', inputs: [], name: 'ConditionNotPresentForAnyAddress' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'currentCondition', internalType: 'address', type: 'address' },
      { name: 'newCondition', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionAlreadyGrantedForDifferentCondition',
  },
  { type: 'error', inputs: [], name: 'PermissionsForAnyAddressDisallowed' },
  {
    type: 'error',
    inputs: [
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'permissionId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'where',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'condition',
        internalType: 'contract IPermissionCondition',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Granted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'permissionId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'here', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'where',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'who', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Revoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ROOT_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_items',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applyMultiTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      {
        name: 'items',
        internalType: 'struct PermissionLib.SingleTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'applySingleTargetPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'grant',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_condition',
        internalType: 'contract IPermissionCondition',
        type: 'address',
      },
    ],
    name: 'grantWithCondition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isGranted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_where', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'revoke',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPlugin
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPluginABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [
      { name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginUUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pluginUupsUpgradeableABI = [
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_PLUGIN_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [
      { name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CallbackHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const callbackHandlerABI = [
  {
    type: 'error',
    inputs: [
      { name: 'callbackSelector', internalType: 'bytes4', type: 'bytes4' },
      { name: 'magicNumber', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'UnkownCallback',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'sig', internalType: 'bytes4', type: 'bytes4', indexed: true },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'CallbackReceived',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20MintableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MintableUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20WrapperUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20WrapperUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'underlying',
    outputs: [
      { name: '', internalType: 'contract IERC20Upgradeable', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20VotesUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20VotesUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'pos', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkpoints',
    outputs: [
      {
        name: '',
        internalType: 'struct ERC20VotesUpgradeable.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'fromBlock', internalType: 'uint32', type: 'uint32' },
          { name: 'votes', internalType: 'uint224', type: 'uint224' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20PermitUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PermitUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20MetadataUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20PermitUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IProposal
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iProposalABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'endDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'allowFailureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ProposalUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const proposalUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'endDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'allowFailureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMajorityVoting
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMajorityVotingABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'votingPower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'canExecute',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_account', internalType: 'address', type: 'address' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_account', internalType: 'address', type: 'address' },
    ],
    name: 'getVoteOption',
    outputs: [
      {
        name: '',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isMinParticipationReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReachedEarly',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minParticipation',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'supportThreshold',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'vote',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MajorityVotingBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const majorityVotingBaseABI = [
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint64', type: 'uint64' },
      { name: 'actual', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'DateOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint64', type: 'uint64' },
      { name: 'actual', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'MinDurationOutOfBounds',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ProposalCreationForbidden',
  },
  {
    type: 'error',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'ProposalExecutionForbidden',
  },
  {
    type: 'error',
    inputs: [
      { name: 'limit', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'RatioOutOfBounds',
  },
  {
    type: 'error',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
      {
        name: 'voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
    name: 'VoteCastForbidden',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'endDate',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'metadata',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        indexed: false,
      },
      {
        name: 'allowFailureMap',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'votingPower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingMode',
        internalType: 'enum MajorityVotingBase.VotingMode',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'supportThreshold',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'minParticipation',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'minDuration',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'minProposerVotingPower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotingSettingsUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'UPGRADE_PLUGIN_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'canExecute',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_metadata', internalType: 'bytes', type: 'bytes' },
      {
        name: '_actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_allowFailureMap', internalType: 'uint256', type: 'uint256' },
      { name: '_startDate', internalType: 'uint64', type: 'uint64' },
      { name: '_endDate', internalType: 'uint64', type: 'uint64' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'createProposal',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'execute',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposal',
    outputs: [
      { name: 'open', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
      {
        name: 'parameters',
        internalType: 'struct MajorityVotingBase.ProposalParameters',
        type: 'tuple',
        components: [
          {
            name: 'votingMode',
            internalType: 'enum MajorityVotingBase.VotingMode',
            type: 'uint8',
          },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'startDate', internalType: 'uint64', type: 'uint64' },
          { name: 'endDate', internalType: 'uint64', type: 'uint64' },
          { name: 'snapshotBlock', internalType: 'uint64', type: 'uint64' },
          { name: 'minVotingPower', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'tally',
        internalType: 'struct MajorityVotingBase.Tally',
        type: 'tuple',
        components: [
          { name: 'abstain', internalType: 'uint256', type: 'uint256' },
          { name: 'yes', internalType: 'uint256', type: 'uint256' },
          { name: 'no', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'actions',
        internalType: 'struct IDAO.Action[]',
        type: 'tuple[]',
        components: [
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'allowFailureMap', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'getVoteOption',
    outputs: [
      {
        name: '',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isMinParticipationReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isSupportThresholdReachedEarly',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDuration',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minParticipation',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minProposerVotingPower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'pluginType',
    outputs: [
      { name: '', internalType: 'enum IPlugin.PluginType', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'supportThreshold',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotingPower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_votingSettings',
        internalType: 'struct MajorityVotingBase.VotingSettings',
        type: 'tuple',
        components: [
          {
            name: 'votingMode',
            internalType: 'enum MajorityVotingBase.VotingMode',
            type: 'uint8',
          },
          { name: 'supportThreshold', internalType: 'uint32', type: 'uint32' },
          { name: 'minParticipation', internalType: 'uint32', type: 'uint32' },
          { name: 'minDuration', internalType: 'uint64', type: 'uint64' },
          {
            name: 'minProposerVotingPower',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'updateVotingSettings',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_voteOption',
        internalType: 'enum IMajorityVoting.VoteOption',
        type: 'uint8',
      },
      { name: '_tryEarlyExecution', internalType: 'bool', type: 'bool' },
    ],
    name: 'vote',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingMode',
    outputs: [
      {
        name: '',
        internalType: 'enum MajorityVotingBase.VotingMode',
        type: 'uint8',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMembership
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMembershipABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'members',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'MembersAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'members',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'MembersRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'definingContract',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MembershipContractAnnounced',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DaoAuthorizableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const daoAuthorizableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernanceERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governanceErc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_dao', internalType: 'contract IDAO', type: 'address' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
      {
        name: '_mintSettings',
        internalType: 'struct GovernanceERC20.MintSettings',
        type: 'tuple',
        components: [
          { name: 'receivers', internalType: 'address[]', type: 'address[]' },
          { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'dao', internalType: 'address', type: 'address' },
      { name: 'where', internalType: 'address', type: 'address' },
      { name: 'who', internalType: 'address', type: 'address' },
      { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'DaoUnauthorized',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'receiversArrayLength',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'amountsArrayLength', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MintSettingsArrayLengthMismatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINT_PERMISSION_ID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'pos', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkpoints',
    outputs: [
      {
        name: '',
        internalType: 'struct ERC20VotesUpgradeable.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'fromBlock', internalType: 'uint32', type: 'uint32' },
          { name: 'votes', internalType: 'uint224', type: 'uint224' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'contract IDAO', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'contract IDAO', type: 'address' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
      {
        name: '_mintSettings',
        internalType: 'struct GovernanceERC20.MintSettings',
        type: 'tuple',
        components: [
          { name: 'receivers', internalType: 'address[]', type: 'address[]' },
          { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
        ],
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernanceWrappedERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governanceWrappedErc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_token',
        internalType: 'contract IERC20Upgradeable',
        type: 'address',
      },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'pos', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'checkpoints',
    outputs: [
      {
        name: '',
        internalType: 'struct ERC20VotesUpgradeable.Checkpoint',
        type: 'tuple',
        components: [
          { name: 'fromBlock', internalType: 'uint32', type: 'uint32' },
          { name: 'votes', internalType: 'uint224', type: 'uint224' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_token',
        internalType: 'contract IERC20Upgradeable',
        type: 'address',
      },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'numCheckpoints',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'underlying',
    outputs: [
      { name: '', internalType: 'contract IERC20Upgradeable', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGovernanceWrappedERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGovernanceWrappedErc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawTo',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPluginSetup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPluginSetupABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'prepareInstallation',
    outputs: [
      { name: 'plugin', internalType: 'address', type: 'address' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUninstallation',
    outputs: [
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_currentBuild', internalType: 'uint16', type: 'uint16' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUpdate',
    outputs: [
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PluginSetup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pluginSetupABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'prepareInstallation',
    outputs: [
      { name: 'plugin', internalType: 'address', type: 'address' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUninstallation',
    outputs: [
      {
        name: 'permissions',
        internalType: 'struct PermissionLib.MultiTargetPermission[]',
        type: 'tuple[]',
        components: [
          {
            name: 'operation',
            internalType: 'enum PermissionLib.Operation',
            type: 'uint8',
          },
          { name: 'where', internalType: 'address', type: 'address' },
          { name: 'who', internalType: 'address', type: 'address' },
          { name: 'condition', internalType: 'address', type: 'address' },
          { name: 'permissionId', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_dao', internalType: 'address', type: 'address' },
      { name: '_currentBuild', internalType: 'uint16', type: 'uint16' },
      {
        name: '_payload',
        internalType: 'struct IPluginSetup.SetupPayload',
        type: 'tuple',
        components: [
          { name: 'plugin', internalType: 'address', type: 'address' },
          {
            name: 'currentHelpers',
            internalType: 'address[]',
            type: 'address[]',
          },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'prepareUpdate',
    outputs: [
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
      {
        name: 'preparedSetupData',
        internalType: 'struct IPluginSetup.PreparedSetupData',
        type: 'tuple',
        components: [
          { name: 'helpers', internalType: 'address[]', type: 'address[]' },
          {
            name: 'permissions',
            internalType: 'struct PermissionLib.MultiTargetPermission[]',
            type: 'tuple[]',
            components: [
              {
                name: 'operation',
                internalType: 'enum PermissionLib.Operation',
                type: 'uint8',
              },
              { name: 'where', internalType: 'address', type: 'address' },
              { name: 'who', internalType: 'address', type: 'address' },
              { name: 'condition', internalType: 'address', type: 'address' },
              {
                name: 'permissionId',
                internalType: 'bytes32',
                type: 'bytes32',
              },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link lensVotingPluginABI}__.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPlugin(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof lensVotingPluginAddress
  } = {} as any,
) {
  return useContract({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof lensVotingPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"UPDATE_VOTING_SETTINGS_PERMISSION_ID"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginUpdateVotingSettingsPermissionId<
  TSelectData = ReadContractResult<
    typeof lensVotingPluginABI,
    'UPDATE_VOTING_SETTINGS_PERMISSION_ID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"UPGRADE_PLUGIN_PERMISSION_ID"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginUpgradePluginPermissionId<
  TSelectData = ReadContractResult<
    typeof lensVotingPluginABI,
    'UPGRADE_PLUGIN_PERMISSION_ID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'UPGRADE_PLUGIN_PERMISSION_ID',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'UPGRADE_PLUGIN_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'UPGRADE_PLUGIN_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"canExecute"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginCanExecute<
  TSelectData = ReadContractResult<typeof lensVotingPluginABI, 'canExecute'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'canExecute',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'canExecute',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'canExecute',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"canVote"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginCanVote<
  TSelectData = ReadContractResult<typeof lensVotingPluginABI, 'canVote'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lensVotingPluginABI, 'canVote', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'canVote',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'canVote',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"dao"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginDao<
  TSelectData = ReadContractResult<typeof lensVotingPluginABI, 'dao'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lensVotingPluginABI, 'dao', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<typeof lensVotingPluginABI, 'dao', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"getProposal"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginGetProposal<
  TSelectData = ReadContractResult<typeof lensVotingPluginABI, 'getProposal'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'getProposal',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'getProposal',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'getProposal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"getVoteOption"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginGetVoteOption<
  TSelectData = ReadContractResult<typeof lensVotingPluginABI, 'getVoteOption'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'getVoteOption',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'getVoteOption',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'getVoteOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"getVotingToken"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginGetVotingToken<
  TSelectData = ReadContractResult<
    typeof lensVotingPluginABI,
    'getVotingToken'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'getVotingToken',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'getVotingToken',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'getVotingToken',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"implementation"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginImplementation<
  TSelectData = ReadContractResult<
    typeof lensVotingPluginABI,
    'implementation'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'implementation',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'implementation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"isMember"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginIsMember<
  TSelectData = ReadContractResult<typeof lensVotingPluginABI, 'isMember'>,
>(
  config: Omit<
    UseContractReadConfig<typeof lensVotingPluginABI, 'isMember', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'isMember',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'isMember',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"isMinParticipationReached"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginIsMinParticipationReached<
  TSelectData = ReadContractResult<
    typeof lensVotingPluginABI,
    'isMinParticipationReached'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'isMinParticipationReached',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'isMinParticipationReached',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'isMinParticipationReached',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"isSupportThresholdReached"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginIsSupportThresholdReached<
  TSelectData = ReadContractResult<
    typeof lensVotingPluginABI,
    'isSupportThresholdReached'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'isSupportThresholdReached',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'isSupportThresholdReached',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'isSupportThresholdReached',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"isSupportThresholdReachedEarly"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginIsSupportThresholdReachedEarly<
  TSelectData = ReadContractResult<
    typeof lensVotingPluginABI,
    'isSupportThresholdReachedEarly'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'isSupportThresholdReachedEarly',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'isSupportThresholdReachedEarly',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'isSupportThresholdReachedEarly',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"minDuration"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginMinDuration<
  TSelectData = ReadContractResult<typeof lensVotingPluginABI, 'minDuration'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'minDuration',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'minDuration',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'minDuration',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"minParticipation"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginMinParticipation<
  TSelectData = ReadContractResult<
    typeof lensVotingPluginABI,
    'minParticipation'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'minParticipation',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'minParticipation',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'minParticipation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"minProposerVotingPower"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginMinProposerVotingPower<
  TSelectData = ReadContractResult<
    typeof lensVotingPluginABI,
    'minProposerVotingPower'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'minProposerVotingPower',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'minProposerVotingPower',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'minProposerVotingPower',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"pluginType"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginPluginType<
  TSelectData = ReadContractResult<typeof lensVotingPluginABI, 'pluginType'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'pluginType',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'pluginType',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"proposalCount"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginProposalCount<
  TSelectData = ReadContractResult<typeof lensVotingPluginABI, 'proposalCount'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'proposalCount',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'proposalCount',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'proposalCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"proxiableUUID"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginProxiableUuid<
  TSelectData = ReadContractResult<typeof lensVotingPluginABI, 'proxiableUUID'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"supportThreshold"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginSupportThreshold<
  TSelectData = ReadContractResult<
    typeof lensVotingPluginABI,
    'supportThreshold'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'supportThreshold',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'supportThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'supportThreshold',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginSupportsInterface<
  TSelectData = ReadContractResult<
    typeof lensVotingPluginABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"totalVotingPower"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginTotalVotingPower<
  TSelectData = ReadContractResult<
    typeof lensVotingPluginABI,
    'totalVotingPower'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'totalVotingPower',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'totalVotingPower',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'totalVotingPower',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"votingMode"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginVotingMode<
  TSelectData = ReadContractResult<typeof lensVotingPluginABI, 'votingMode'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingPluginABI,
      'votingMode',
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractRead({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'votingMode',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingPluginABI,
    'votingMode',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof lensVotingPluginAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lensVotingPluginABI, string>['abi'],
        TFunctionName
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        TMode,
        typeof lensVotingPluginABI,
        TFunctionName
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensVotingPluginABI, TFunctionName>({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"createProposal"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginCreateProposal<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof lensVotingPluginAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensVotingPluginABI,
          'createProposal'
        >['abi'],
        'createProposal'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'createProposal'
      }
    : UseContractWriteConfig<
        TMode,
        typeof lensVotingPluginABI,
        'createProposal'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createProposal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensVotingPluginABI, 'createProposal'>({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'createProposal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"execute"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginExecute<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof lensVotingPluginAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensVotingPluginABI,
          'execute'
        >['abi'],
        'execute'
      > & { address?: Address; chainId?: TChainId; functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof lensVotingPluginABI, 'execute'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensVotingPluginABI, 'execute'>({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginInitialize<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof lensVotingPluginAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensVotingPluginABI,
          'initialize'
        >['abi'],
        'initialize'
      > & { address?: Address; chainId?: TChainId; functionName?: 'initialize' }
    : UseContractWriteConfig<
        TMode,
        typeof lensVotingPluginABI,
        'initialize'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensVotingPluginABI, 'initialize'>({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"updateVotingSettings"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginUpdateVotingSettings<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof lensVotingPluginAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensVotingPluginABI,
          'updateVotingSettings'
        >['abi'],
        'updateVotingSettings'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'updateVotingSettings'
      }
    : UseContractWriteConfig<
        TMode,
        typeof lensVotingPluginABI,
        'updateVotingSettings'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'updateVotingSettings'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof lensVotingPluginABI,
    'updateVotingSettings'
  >({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'updateVotingSettings',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"upgradeTo"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginUpgradeTo<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof lensVotingPluginAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensVotingPluginABI,
          'upgradeTo'
        >['abi'],
        'upgradeTo'
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeTo' }
    : UseContractWriteConfig<TMode, typeof lensVotingPluginABI, 'upgradeTo'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensVotingPluginABI, 'upgradeTo'>({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"upgradeToAndCall"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginUpgradeToAndCall<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof lensVotingPluginAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensVotingPluginABI,
          'upgradeToAndCall'
        >['abi'],
        'upgradeToAndCall'
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'upgradeToAndCall'
      }
    : UseContractWriteConfig<
        TMode,
        typeof lensVotingPluginABI,
        'upgradeToAndCall'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof lensVotingPluginABI,
    'upgradeToAndCall'
  >({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"vote"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginVote<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof lensVotingPluginAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lensVotingPluginABI, 'vote'>['abi'],
        'vote'
      > & { address?: Address; chainId?: TChainId; functionName?: 'vote' }
    : UseContractWriteConfig<TMode, typeof lensVotingPluginABI, 'vote'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'vote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensVotingPluginABI, 'vote'>({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function usePrepareLensVotingPluginWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensVotingPluginABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensVotingPluginABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"createProposal"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function usePrepareLensVotingPluginCreateProposal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensVotingPluginABI, 'createProposal'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'createProposal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lensVotingPluginABI,
    'createProposal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"execute"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function usePrepareLensVotingPluginExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensVotingPluginABI, 'execute'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensVotingPluginABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"initialize"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function usePrepareLensVotingPluginInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensVotingPluginABI, 'initialize'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensVotingPluginABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"updateVotingSettings"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function usePrepareLensVotingPluginUpdateVotingSettings(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof lensVotingPluginABI,
      'updateVotingSettings'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'updateVotingSettings',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lensVotingPluginABI,
    'updateVotingSettings'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"upgradeTo"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function usePrepareLensVotingPluginUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensVotingPluginABI, 'upgradeTo'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensVotingPluginABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"upgradeToAndCall"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function usePrepareLensVotingPluginUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof lensVotingPluginABI,
      'upgradeToAndCall'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lensVotingPluginABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensVotingPluginABI}__ and `functionName` set to `"vote"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function usePrepareLensVotingPluginVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensVotingPluginABI, 'vote'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensVotingPluginABI, 'vote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensVotingPluginABI}__.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof lensVotingPluginABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractEvent({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    ...config,
  } as UseContractEventConfig<typeof lensVotingPluginABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensVotingPluginABI}__ and `eventName` set to `"AdminChanged"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof lensVotingPluginABI, 'AdminChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractEvent({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof lensVotingPluginABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensVotingPluginABI}__ and `eventName` set to `"BeaconUpgraded"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof lensVotingPluginABI, 'BeaconUpgraded'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractEvent({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof lensVotingPluginABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensVotingPluginABI}__ and `eventName` set to `"Initialized"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof lensVotingPluginABI, 'Initialized'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractEvent({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof lensVotingPluginABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensVotingPluginABI}__ and `eventName` set to `"MembersAdded"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginMembersAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof lensVotingPluginABI, 'MembersAdded'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractEvent({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    eventName: 'MembersAdded',
    ...config,
  } as UseContractEventConfig<typeof lensVotingPluginABI, 'MembersAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensVotingPluginABI}__ and `eventName` set to `"MembersRemoved"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginMembersRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof lensVotingPluginABI, 'MembersRemoved'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractEvent({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    eventName: 'MembersRemoved',
    ...config,
  } as UseContractEventConfig<typeof lensVotingPluginABI, 'MembersRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensVotingPluginABI}__ and `eventName` set to `"MembershipContractAnnounced"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginMembershipContractAnnouncedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof lensVotingPluginABI,
      'MembershipContractAnnounced'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractEvent({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    eventName: 'MembershipContractAnnounced',
    ...config,
  } as UseContractEventConfig<
    typeof lensVotingPluginABI,
    'MembershipContractAnnounced'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensVotingPluginABI}__ and `eventName` set to `"ProposalCreated"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof lensVotingPluginABI, 'ProposalCreated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractEvent({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof lensVotingPluginABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensVotingPluginABI}__ and `eventName` set to `"ProposalExecuted"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof lensVotingPluginABI, 'ProposalExecuted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractEvent({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof lensVotingPluginABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensVotingPluginABI}__ and `eventName` set to `"Upgraded"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof lensVotingPluginABI, 'Upgraded'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractEvent({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof lensVotingPluginABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensVotingPluginABI}__ and `eventName` set to `"VoteCast"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof lensVotingPluginABI, 'VoteCast'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractEvent({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof lensVotingPluginABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lensVotingPluginABI}__ and `eventName` set to `"VotingSettingsUpdated"`.
 *
 * [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0x7abe9ba7fbd92d9b3774d80c4363b854a5fa5ac6)
 */
export function useLensVotingPluginVotingSettingsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof lensVotingPluginABI, 'VotingSettingsUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof lensVotingPluginAddress } = {} as any,
) {
  return useContractEvent({
    abi: lensVotingPluginABI,
    address: lensVotingPluginAddress[137],
    eventName: 'VotingSettingsUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof lensVotingPluginABI,
    'VotingSettingsUpdated'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link lensVotingSetupABI}__.
 */
export function useLensVotingSetup(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: lensVotingSetupABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingSetupABI}__.
 */
export function useLensVotingSetupRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof lensVotingSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingSetupABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: lensVotingSetupABI,
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingSetupABI}__ and `functionName` set to `"implementation"`.
 */
export function useLensVotingSetupImplementation<
  TSelectData = ReadContractResult<typeof lensVotingSetupABI, 'implementation'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingSetupABI,
      'implementation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lensVotingSetupABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingSetupABI,
    'implementation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function useLensVotingSetupPrepareUninstallation<
  TSelectData = ReadContractResult<
    typeof lensVotingSetupABI,
    'prepareUninstallation'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingSetupABI,
      'prepareUninstallation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lensVotingSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingSetupABI,
    'prepareUninstallation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lensVotingSetupABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useLensVotingSetupSupportsInterface<
  TSelectData = ReadContractResult<
    typeof lensVotingSetupABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof lensVotingSetupABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lensVotingSetupABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof lensVotingSetupABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensVotingSetupABI}__.
 */
export function useLensVotingSetupWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lensVotingSetupABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof lensVotingSetupABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensVotingSetupABI, TFunctionName>({
    abi: lensVotingSetupABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensVotingSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function useLensVotingSetupPrepareInstallation<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensVotingSetupABI,
          'prepareInstallation'
        >['abi'],
        'prepareInstallation'
      > & { functionName?: 'prepareInstallation' }
    : UseContractWriteConfig<
        TMode,
        typeof lensVotingSetupABI,
        'prepareInstallation'
      > & {
        abi?: never
        functionName?: 'prepareInstallation'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof lensVotingSetupABI,
    'prepareInstallation'
  >({
    abi: lensVotingSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lensVotingSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function useLensVotingSetupPrepareUpdate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lensVotingSetupABI,
          'prepareUpdate'
        >['abi'],
        'prepareUpdate'
      > & { functionName?: 'prepareUpdate' }
    : UseContractWriteConfig<
        TMode,
        typeof lensVotingSetupABI,
        'prepareUpdate'
      > & {
        abi?: never
        functionName?: 'prepareUpdate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lensVotingSetupABI, 'prepareUpdate'>({
    abi: lensVotingSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensVotingSetupABI}__.
 */
export function usePrepareLensVotingSetupWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensVotingSetupABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensVotingSetupABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof lensVotingSetupABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensVotingSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePrepareLensVotingSetupPrepareInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof lensVotingSetupABI,
      'prepareInstallation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensVotingSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lensVotingSetupABI,
    'prepareInstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lensVotingSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePrepareLensVotingSetupPrepareUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lensVotingSetupABI, 'prepareUpdate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lensVotingSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lensVotingSetupABI,
    'prepareUpdate'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iFollowNftABI}__.
 */
export function useIFollowNft(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iFollowNftABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFollowNftABI}__.
 */
export function useIFollowNftRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iFollowNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFollowNftABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iFollowNftABI,
    ...config,
  } as UseContractReadConfig<typeof iFollowNftABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFollowNftABI}__ and `functionName` set to `"getDelegatedSupplyByBlockNumber"`.
 */
export function useIFollowNftGetDelegatedSupplyByBlockNumber<
  TSelectData = ReadContractResult<
    typeof iFollowNftABI,
    'getDelegatedSupplyByBlockNumber'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFollowNftABI,
      'getDelegatedSupplyByBlockNumber',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFollowNftABI,
    functionName: 'getDelegatedSupplyByBlockNumber',
    ...config,
  } as UseContractReadConfig<
    typeof iFollowNftABI,
    'getDelegatedSupplyByBlockNumber',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFollowNftABI}__ and `functionName` set to `"getPowerByBlockNumber"`.
 */
export function useIFollowNftGetPowerByBlockNumber<
  TSelectData = ReadContractResult<
    typeof iFollowNftABI,
    'getPowerByBlockNumber'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iFollowNftABI,
      'getPowerByBlockNumber',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFollowNftABI,
    functionName: 'getPowerByBlockNumber',
    ...config,
  } as UseContractReadConfig<
    typeof iFollowNftABI,
    'getPowerByBlockNumber',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFollowNftABI}__.
 */
export function useIFollowNftWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iFollowNftABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iFollowNftABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFollowNftABI, TFunctionName>({
    abi: iFollowNftABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFollowNftABI}__ and `functionName` set to `"delegate"`.
 */
export function useIFollowNftDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iFollowNftABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof iFollowNftABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFollowNftABI, 'delegate'>({
    abi: iFollowNftABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFollowNftABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useIFollowNftDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iFollowNftABI,
          'delegateBySig'
        >['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof iFollowNftABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFollowNftABI, 'delegateBySig'>({
    abi: iFollowNftABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFollowNftABI}__ and `functionName` set to `"initialize"`.
 */
export function useIFollowNftInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iFollowNftABI, 'initialize'>['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof iFollowNftABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFollowNftABI, 'initialize'>({
    abi: iFollowNftABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFollowNftABI}__ and `functionName` set to `"mint"`.
 */
export function useIFollowNftMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iFollowNftABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof iFollowNftABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFollowNftABI, 'mint'>({
    abi: iFollowNftABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFollowNftABI}__.
 */
export function usePrepareIFollowNftWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFollowNftABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFollowNftABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFollowNftABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFollowNftABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareIFollowNftDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFollowNftABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFollowNftABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFollowNftABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFollowNftABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareIFollowNftDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFollowNftABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFollowNftABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFollowNftABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFollowNftABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIFollowNftInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFollowNftABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFollowNftABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFollowNftABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFollowNftABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareIFollowNftMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFollowNftABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFollowNftABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFollowNftABI, 'mint'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1822ProxiableABI}__.
 */
export function useIerc1822Proxiable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1822ProxiableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__.
 */
export function useIerc1822ProxiableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1822ProxiableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableProxiableUuid<
  TSelectData = ReadContractResult<
    typeof ierc1822ProxiableABI,
    'proxiableUUID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1271ABI}__.
 */
export function useIerc1271(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1271ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1271ABI}__.
 */
export function useIerc1271Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1271ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1271ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1271ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc1271ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1271ABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useIerc1271IsValidSignature<
  TSelectData = ReadContractResult<typeof ierc1271ABI, 'isValidSignature'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1271ABI, 'isValidSignature', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1271ABI,
    functionName: 'isValidSignature',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1271ABI,
    'isValidSignature',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link proxyABI}__.
 */
export function useProxy(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: proxyABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: contextUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useContextUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1822ProxiableUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableUpgradeableProxiableUuid<
  TSelectData = ReadContractResult<
    typeof ierc1822ProxiableUpgradeableABI,
    'proxiableUUID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableUpgradeableABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc165ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function useIVotesUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iVotesUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function useIVotesUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegates"`.
 */
export function useIVotesUpgradeableDelegates<
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, 'delegates'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotesUpgradeableABI,
      'delegates',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesUpgradeableABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    'delegates',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useIVotesUpgradeableGetPastTotalSupply<
  TSelectData = ReadContractResult<
    typeof iVotesUpgradeableABI,
    'getPastTotalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotesUpgradeableABI,
      'getPastTotalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesUpgradeableABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    'getPastTotalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useIVotesUpgradeableGetPastVotes<
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, 'getPastVotes'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iVotesUpgradeableABI,
      'getPastVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesUpgradeableABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    'getPastVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIVotesUpgradeableGetVotes<
  TSelectData = ReadContractResult<typeof iVotesUpgradeableABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesUpgradeableABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesUpgradeableABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof iVotesUpgradeableABI,
    'getVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function useIVotesUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotesUpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iVotesUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotesUpgradeableABI, TFunctionName>({
    abi: iVotesUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegate"`.
 */
export function useIVotesUpgradeableDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVotesUpgradeableABI,
          'delegate'
        >['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof iVotesUpgradeableABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotesUpgradeableABI, 'delegate'>({
    abi: iVotesUpgradeableABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useIVotesUpgradeableDelegateBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iVotesUpgradeableABI,
          'delegateBySig'
        >['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof iVotesUpgradeableABI,
        'delegateBySig'
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotesUpgradeableABI, 'delegateBySig'>({
    abi: iVotesUpgradeableABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function usePrepareIVotesUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iVotesUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareIVotesUpgradeableDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesUpgradeableABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareIVotesUpgradeableDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesUpgradeableABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesUpgradeableABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iVotesUpgradeableABI,
    'delegateBySig'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesUpgradeableABI}__.
 */
export function useIVotesUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iVotesUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof iVotesUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useIVotesUpgradeableDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesUpgradeableABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesUpgradeableABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesUpgradeableABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesUpgradeableABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useIVotesUpgradeableDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesUpgradeableABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesUpgradeableABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iVotesUpgradeableABI,
    'DelegateVotesChanged'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TSelectData = ReadContractResult<typeof erc165ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc1967ProxyABI}__.
 */
export function useErc1967Proxy(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc1967ProxyABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__.
 */
export function useErc1967ProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967ProxyABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967ProxyABI,
    ...config,
  } as UseContractEventConfig<typeof erc1967ProxyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967ProxyAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967ProxyABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967ProxyABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof erc1967ProxyABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967ProxyBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967ProxyABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967ProxyABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967ProxyABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967ProxyABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967ProxyUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967ProxyABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967ProxyABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967ProxyABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc1967UpgradeABI}__.
 */
export function useErc1967Upgrade(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc1967UpgradeABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__.
 */
export function useErc1967UpgradeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBeaconABI}__.
 */
export function useIBeacon(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iBeaconABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__.
 */
export function useIBeaconRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconABI,
    ...config,
  } as UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconImplementation<
  TSelectData = ReadContractResult<typeof iBeaconABI, 'implementation'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconABI, 'implementation', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof iBeaconABI, 'implementation', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc1967UpgradeUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc1967UpgradeUpgradeableABI,
      'BeaconUpgraded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1967UpgradeUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: uupsUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useUupsUpgradeableProxiableUuid<
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, 'proxiableUUID'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uupsUpgradeableABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof uupsUpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof uupsUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof uupsUpgradeableABI, TFunctionName>({
    abi: uupsUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useUupsUpgradeableUpgradeTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeTo'
        >['abi'],
        'upgradeTo'
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<TMode, typeof uupsUpgradeableABI, 'upgradeTo'> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof uupsUpgradeableABI, 'upgradeTo'>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useUupsUpgradeableUpgradeToAndCall<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeToAndCall'
        >['abi'],
        'upgradeToAndCall'
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        TMode,
        typeof uupsUpgradeableABI,
        'upgradeToAndCall'
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof uupsUpgradeableABI, 'upgradeToAndCall'>(
    {
      abi: uupsUpgradeableABI,
      functionName: 'upgradeToAndCall',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function usePrepareUupsUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof uupsUpgradeableABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof uupsUpgradeableABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useUupsUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useUupsUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useUupsUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc20UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20UpgradeableAllowance<
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20UpgradeableBalanceOf<
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20UpgradeableDecimals<
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20UpgradeableName<
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20UpgradeableABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20UpgradeableSymbol<
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20UpgradeableABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20UpgradeableABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20UpgradeableTotalSupply<
  TSelectData = ReadContractResult<typeof erc20UpgradeableABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20UpgradeableABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20UpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20UpgradeableABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20UpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20UpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc20UpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20UpgradeableABI, TFunctionName>({
    abi: erc20UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20UpgradeableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20UpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20UpgradeableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20UpgradeableABI, 'approve'>({
    abi: erc20UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20UpgradeableDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20UpgradeableABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20UpgradeableABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20UpgradeableABI,
    'decreaseAllowance'
  >({
    abi: erc20UpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20UpgradeableIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20UpgradeableABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20UpgradeableABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20UpgradeableABI,
    'increaseAllowance'
  >({
    abi: erc20UpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20UpgradeableTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20UpgradeableABI,
          'transfer'
        >['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20UpgradeableABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20UpgradeableABI, 'transfer'>({
    abi: erc20UpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20UpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20UpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20UpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20UpgradeableABI, 'transferFrom'>({
    abi: erc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function usePrepareErc20UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20UpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20UpgradeableABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20UpgradeableABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20UpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20UpgradeableABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20UpgradeableABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20UpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20UpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__.
 */
export function useErc20UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20UpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc20UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20UpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20UpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: initializableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    ...config,
  } as UseContractEventConfig<typeof initializableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof initializableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc20UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20UpgradeableAllowance<
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20UpgradeableABI,
      'allowance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20UpgradeableBalanceOf<
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20UpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20UpgradeableTotalSupply<
  TSelectData = ReadContractResult<typeof ierc20UpgradeableABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20UpgradeableABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20UpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20UpgradeableABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20UpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc20UpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20UpgradeableABI, TFunctionName>({
    abi: ierc20UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20UpgradeableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20UpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20UpgradeableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20UpgradeableABI, 'approve'>({
    abi: ierc20UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20UpgradeableTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20UpgradeableABI,
          'transfer'
        >['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20UpgradeableABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20UpgradeableABI, 'transfer'>({
    abi: ierc20UpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20UpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20UpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc20UpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20UpgradeableABI, 'transferFrom'>({
    abi: ierc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function usePrepareIerc20UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20UpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20UpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__.
 */
export function useIerc20UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20UpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20UpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20UpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iBeaconUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBeaconUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconUpgradeableImplementation<
  TSelectData = ReadContractResult<
    typeof iBeaconUpgradeableABI,
    'implementation'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBeaconUpgradeableABI,
      'implementation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    'implementation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function useIerc721ReceiverUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721ReceiverUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function useIerc721ReceiverUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ReceiverUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName
  >({ abi: ierc721ReceiverUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverUpgradeableOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ReceiverUpgradeableABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverUpgradeableABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721ReceiverUpgradeableABI,
    'onERC721Received'
  >({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function usePrepareIerc721ReceiverUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverUpgradeableOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverUpgradeableABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function useIerc1155ReceiverUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1155ReceiverUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function useIerc1155ReceiverUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155ReceiverUpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc1155ReceiverUpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function useIerc1155ReceiverUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ReceiverUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName
  >({ abi: ierc1155ReceiverUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useIerc1155ReceiverUpgradeableOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ReceiverUpgradeableABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverUpgradeableABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155ReceiverUpgradeableABI,
    'onERC1155BatchReceived'
  >({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useIerc1155ReceiverUpgradeableOnErc1155Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ReceiverUpgradeableABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverUpgradeableABI,
        'onERC1155Received'
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155ReceiverUpgradeableABI,
    'onERC1155Received'
  >({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function usePrepareIerc1155ReceiverUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareIerc1155ReceiverUpgradeableOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareIerc1155ReceiverUpgradeableOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      'onERC1155Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1155UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc1155UpgradeableBalanceOf<
  TSelectData = ReadContractResult<typeof ierc1155UpgradeableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useIerc1155UpgradeableBalanceOfBatch<
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    'balanceOfBatch'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      'balanceOfBatch',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    'balanceOfBatch',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc1155UpgradeableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155UpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155UpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155UpgradeableABI, TFunctionName>({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useIerc1155UpgradeableSafeBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155UpgradeableABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155UpgradeableABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155UpgradeableABI,
    'safeBatchTransferFrom'
  >({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc1155UpgradeableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155UpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155UpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155UpgradeableABI,
    'safeTransferFrom'
  >({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc1155UpgradeableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155UpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155UpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155UpgradeableABI,
    'setApprovalForAll'
  >({
    abi: ierc1155UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function usePrepareIerc1155UpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareIerc1155UpgradeableSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155UpgradeableABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc1155UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155UpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc1155UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155UpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc1155UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useIerc1155UpgradeableTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIerc1155UpgradeableTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"URI"`.
 */
export function useIerc1155UpgradeableUriEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'URI'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link eip712UpgradeableABI}__.
 */
export function useEip712Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: eip712UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712UpgradeableABI}__.
 */
export function useEip712UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof eip712UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: eip712UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof eip712UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link eip712UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useEip712UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof eip712UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: eip712UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof eip712UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__.
 */
export function useErc165StorageUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc165StorageUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__.
 */
export function useErc165StorageUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc165StorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165StorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165StorageUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc165StorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165StorageUpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc165StorageUpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165StorageUpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165StorageUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc165StorageUpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__.
 */
export function useErc165StorageUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc165StorageUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165StorageUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc165StorageUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165StorageUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165StorageUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc165StorageUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165StorageUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof erc165StorageUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc165UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc165UpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link daoABI}__.
 */
export function useDao(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: daoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__.
 */
export function useDaoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof daoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: daoABI, ...config } as UseContractReadConfig<
    typeof daoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"EXECUTE_PERMISSION_ID"`.
 */
export function useDaoExecutePermissionId<
  TSelectData = ReadContractResult<typeof daoABI, 'EXECUTE_PERMISSION_ID'>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, 'EXECUTE_PERMISSION_ID', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'EXECUTE_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof daoABI,
    'EXECUTE_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"REGISTER_STANDARD_CALLBACK_PERMISSION_ID"`.
 */
export function useDaoRegisterStandardCallbackPermissionId<
  TSelectData = ReadContractResult<
    typeof daoABI,
    'REGISTER_STANDARD_CALLBACK_PERMISSION_ID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof daoABI,
      'REGISTER_STANDARD_CALLBACK_PERMISSION_ID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'REGISTER_STANDARD_CALLBACK_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof daoABI,
    'REGISTER_STANDARD_CALLBACK_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"ROOT_PERMISSION_ID"`.
 */
export function useDaoRootPermissionId<
  TSelectData = ReadContractResult<typeof daoABI, 'ROOT_PERMISSION_ID'>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, 'ROOT_PERMISSION_ID', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'ROOT_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, 'ROOT_PERMISSION_ID', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"SET_METADATA_PERMISSION_ID"`.
 */
export function useDaoSetMetadataPermissionId<
  TSelectData = ReadContractResult<typeof daoABI, 'SET_METADATA_PERMISSION_ID'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof daoABI,
      'SET_METADATA_PERMISSION_ID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'SET_METADATA_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof daoABI,
    'SET_METADATA_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"SET_SIGNATURE_VALIDATOR_PERMISSION_ID"`.
 */
export function useDaoSetSignatureValidatorPermissionId<
  TSelectData = ReadContractResult<
    typeof daoABI,
    'SET_SIGNATURE_VALIDATOR_PERMISSION_ID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof daoABI,
      'SET_SIGNATURE_VALIDATOR_PERMISSION_ID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'SET_SIGNATURE_VALIDATOR_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof daoABI,
    'SET_SIGNATURE_VALIDATOR_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"SET_TRUSTED_FORWARDER_PERMISSION_ID"`.
 */
export function useDaoSetTrustedForwarderPermissionId<
  TSelectData = ReadContractResult<
    typeof daoABI,
    'SET_TRUSTED_FORWARDER_PERMISSION_ID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof daoABI,
      'SET_TRUSTED_FORWARDER_PERMISSION_ID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'SET_TRUSTED_FORWARDER_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof daoABI,
    'SET_TRUSTED_FORWARDER_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"UPGRADE_DAO_PERMISSION_ID"`.
 */
export function useDaoUpgradeDaoPermissionId<
  TSelectData = ReadContractResult<typeof daoABI, 'UPGRADE_DAO_PERMISSION_ID'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof daoABI,
      'UPGRADE_DAO_PERMISSION_ID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'UPGRADE_DAO_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof daoABI,
    'UPGRADE_DAO_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"daoURI"`.
 */
export function useDaoDaoUri<
  TSelectData = ReadContractResult<typeof daoABI, 'daoURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, 'daoURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'daoURI',
    ...config,
  } as UseContractReadConfig<typeof daoABI, 'daoURI', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"getTrustedForwarder"`.
 */
export function useDaoGetTrustedForwarder<
  TSelectData = ReadContractResult<typeof daoABI, 'getTrustedForwarder'>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, 'getTrustedForwarder', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'getTrustedForwarder',
    ...config,
  } as UseContractReadConfig<typeof daoABI, 'getTrustedForwarder', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"hasPermission"`.
 */
export function useDaoHasPermission<
  TSelectData = ReadContractResult<typeof daoABI, 'hasPermission'>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, 'hasPermission', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'hasPermission',
    ...config,
  } as UseContractReadConfig<typeof daoABI, 'hasPermission', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"isGranted"`.
 */
export function useDaoIsGranted<
  TSelectData = ReadContractResult<typeof daoABI, 'isGranted'>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, 'isGranted', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'isGranted',
    ...config,
  } as UseContractReadConfig<typeof daoABI, 'isGranted', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useDaoIsValidSignature<
  TSelectData = ReadContractResult<typeof daoABI, 'isValidSignature'>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, 'isValidSignature', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'isValidSignature',
    ...config,
  } as UseContractReadConfig<typeof daoABI, 'isValidSignature', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useDaoProxiableUuid<
  TSelectData = ReadContractResult<typeof daoABI, 'proxiableUUID'>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, 'proxiableUUID', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof daoABI, 'proxiableUUID', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"signatureValidator"`.
 */
export function useDaoSignatureValidator<
  TSelectData = ReadContractResult<typeof daoABI, 'signatureValidator'>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, 'signatureValidator', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'signatureValidator',
    ...config,
  } as UseContractReadConfig<typeof daoABI, 'signatureValidator', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useDaoSupportsInterface<
  TSelectData = ReadContractResult<typeof daoABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof daoABI, 'supportsInterface', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__.
 */
export function useDaoWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof daoABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof daoABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, TFunctionName>({
    abi: daoABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function useDaoApplyMultiTargetPermissions<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof daoABI,
          'applyMultiTargetPermissions'
        >['abi'],
        'applyMultiTargetPermissions'
      > & { functionName?: 'applyMultiTargetPermissions' }
    : UseContractWriteConfig<
        TMode,
        typeof daoABI,
        'applyMultiTargetPermissions'
      > & {
        abi?: never
        functionName?: 'applyMultiTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'applyMultiTargetPermissions'>({
    abi: daoABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function useDaoApplySingleTargetPermissions<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof daoABI,
          'applySingleTargetPermissions'
        >['abi'],
        'applySingleTargetPermissions'
      > & { functionName?: 'applySingleTargetPermissions' }
    : UseContractWriteConfig<
        TMode,
        typeof daoABI,
        'applySingleTargetPermissions'
      > & {
        abi?: never
        functionName?: 'applySingleTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'applySingleTargetPermissions'>(
    {
      abi: daoABI,
      functionName: 'applySingleTargetPermissions',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"deposit"`.
 */
export function useDaoDeposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof daoABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof daoABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'deposit'>({
    abi: daoABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"execute"`.
 */
export function useDaoExecute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof daoABI, 'execute'>['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof daoABI, 'execute'> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'execute'>({
    abi: daoABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"grant"`.
 */
export function useDaoGrant<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof daoABI, 'grant'>['abi'],
        'grant'
      > & { functionName?: 'grant' }
    : UseContractWriteConfig<TMode, typeof daoABI, 'grant'> & {
        abi?: never
        functionName?: 'grant'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'grant'>({
    abi: daoABI,
    functionName: 'grant',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function useDaoGrantWithCondition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof daoABI, 'grantWithCondition'>['abi'],
        'grantWithCondition'
      > & { functionName?: 'grantWithCondition' }
    : UseContractWriteConfig<TMode, typeof daoABI, 'grantWithCondition'> & {
        abi?: never
        functionName?: 'grantWithCondition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'grantWithCondition'>({
    abi: daoABI,
    functionName: 'grantWithCondition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"initialize"`.
 */
export function useDaoInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof daoABI, 'initialize'>['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof daoABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'initialize'>({
    abi: daoABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"registerStandardCallback"`.
 */
export function useDaoRegisterStandardCallback<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof daoABI,
          'registerStandardCallback'
        >['abi'],
        'registerStandardCallback'
      > & { functionName?: 'registerStandardCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof daoABI,
        'registerStandardCallback'
      > & {
        abi?: never
        functionName?: 'registerStandardCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'registerStandardCallback'>({
    abi: daoABI,
    functionName: 'registerStandardCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"revoke"`.
 */
export function useDaoRevoke<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof daoABI, 'revoke'>['abi'],
        'revoke'
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<TMode, typeof daoABI, 'revoke'> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'revoke'>({
    abi: daoABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setDaoURI"`.
 */
export function useDaoSetDaoUri<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof daoABI, 'setDaoURI'>['abi'],
        'setDaoURI'
      > & { functionName?: 'setDaoURI' }
    : UseContractWriteConfig<TMode, typeof daoABI, 'setDaoURI'> & {
        abi?: never
        functionName?: 'setDaoURI'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'setDaoURI'>({
    abi: daoABI,
    functionName: 'setDaoURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setMetadata"`.
 */
export function useDaoSetMetadata<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof daoABI, 'setMetadata'>['abi'],
        'setMetadata'
      > & { functionName?: 'setMetadata' }
    : UseContractWriteConfig<TMode, typeof daoABI, 'setMetadata'> & {
        abi?: never
        functionName?: 'setMetadata'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'setMetadata'>({
    abi: daoABI,
    functionName: 'setMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setSignatureValidator"`.
 */
export function useDaoSetSignatureValidator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof daoABI,
          'setSignatureValidator'
        >['abi'],
        'setSignatureValidator'
      > & { functionName?: 'setSignatureValidator' }
    : UseContractWriteConfig<TMode, typeof daoABI, 'setSignatureValidator'> & {
        abi?: never
        functionName?: 'setSignatureValidator'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'setSignatureValidator'>({
    abi: daoABI,
    functionName: 'setSignatureValidator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function useDaoSetTrustedForwarder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof daoABI, 'setTrustedForwarder'>['abi'],
        'setTrustedForwarder'
      > & { functionName?: 'setTrustedForwarder' }
    : UseContractWriteConfig<TMode, typeof daoABI, 'setTrustedForwarder'> & {
        abi?: never
        functionName?: 'setTrustedForwarder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'setTrustedForwarder'>({
    abi: daoABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useDaoUpgradeTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof daoABI, 'upgradeTo'>['abi'],
        'upgradeTo'
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<TMode, typeof daoABI, 'upgradeTo'> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'upgradeTo'>({
    abi: daoABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useDaoUpgradeToAndCall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof daoABI, 'upgradeToAndCall'>['abi'],
        'upgradeToAndCall'
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<TMode, typeof daoABI, 'upgradeToAndCall'> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof daoABI, 'upgradeToAndCall'>({
    abi: daoABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__.
 */
export function usePrepareDaoWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function usePrepareDaoApplyMultiTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'applyMultiTargetPermissions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof daoABI,
    'applyMultiTargetPermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function usePrepareDaoApplySingleTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof daoABI,
      'applySingleTargetPermissions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof daoABI,
    'applySingleTargetPermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareDaoDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareDaoExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"grant"`.
 */
export function usePrepareDaoGrant(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'grant'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'grant',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'grant'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function usePrepareDaoGrantWithCondition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'grantWithCondition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'grantWithCondition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'grantWithCondition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareDaoInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"registerStandardCallback"`.
 */
export function usePrepareDaoRegisterStandardCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'registerStandardCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'registerStandardCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'registerStandardCallback'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareDaoRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'revoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setDaoURI"`.
 */
export function usePrepareDaoSetDaoUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'setDaoURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'setDaoURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'setDaoURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setMetadata"`.
 */
export function usePrepareDaoSetMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'setMetadata'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'setMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'setMetadata'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setSignatureValidator"`.
 */
export function usePrepareDaoSetSignatureValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'setSignatureValidator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'setSignatureValidator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'setSignatureValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function usePrepareDaoSetTrustedForwarder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'setTrustedForwarder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'setTrustedForwarder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareDaoUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareDaoUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: daoABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__.
 */
export function useDaoEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof daoABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: daoABI, ...config } as UseContractEventConfig<
    typeof daoABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useDaoAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useDaoBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"CallbackReceived"`.
 */
export function useDaoCallbackReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'CallbackReceived'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'CallbackReceived',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'CallbackReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Deposited"`.
 */
export function useDaoDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'Deposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Executed"`.
 */
export function useDaoExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'Executed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'Executed',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Executed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Granted"`.
 */
export function useDaoGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'Granted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'Granted',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Granted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDaoInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"MetadataSet"`.
 */
export function useDaoMetadataSetEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'MetadataSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'MetadataSet',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'MetadataSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"NativeTokenDeposited"`.
 */
export function useDaoNativeTokenDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'NativeTokenDeposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'NativeTokenDeposited',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'NativeTokenDeposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"NewURI"`.
 */
export function useDaoNewUriEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'NewURI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'NewURI',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'NewURI'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Revoked"`.
 */
export function useDaoRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'Revoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'Revoked',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Revoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"SignatureValidatorSet"`.
 */
export function useDaoSignatureValidatorSetEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'SignatureValidatorSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'SignatureValidatorSet',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'SignatureValidatorSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"StandardCallbackRegistered"`.
 */
export function useDaoStandardCallbackRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'StandardCallbackRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'StandardCallbackRegistered',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'StandardCallbackRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"TrustedForwarderSet"`.
 */
export function useDaoTrustedForwarderSetEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'TrustedForwarderSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'TrustedForwarderSet',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'TrustedForwarderSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useDaoUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof daoABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link idaoABI}__.
 */
export function useIdao(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: idaoABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idaoABI}__.
 */
export function useIdaoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof idaoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof idaoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: idaoABI, ...config } as UseContractReadConfig<
    typeof idaoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"getTrustedForwarder"`.
 */
export function useIdaoGetTrustedForwarder<
  TSelectData = ReadContractResult<typeof idaoABI, 'getTrustedForwarder'>,
>(
  config: Omit<
    UseContractReadConfig<typeof idaoABI, 'getTrustedForwarder', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: idaoABI,
    functionName: 'getTrustedForwarder',
    ...config,
  } as UseContractReadConfig<
    typeof idaoABI,
    'getTrustedForwarder',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"hasPermission"`.
 */
export function useIdaoHasPermission<
  TSelectData = ReadContractResult<typeof idaoABI, 'hasPermission'>,
>(
  config: Omit<
    UseContractReadConfig<typeof idaoABI, 'hasPermission', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: idaoABI,
    functionName: 'hasPermission',
    ...config,
  } as UseContractReadConfig<typeof idaoABI, 'hasPermission', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__.
 */
export function useIdaoWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof idaoABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof idaoABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof idaoABI, TFunctionName>({
    abi: idaoABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"deposit"`.
 */
export function useIdaoDeposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof idaoABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof idaoABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof idaoABI, 'deposit'>({
    abi: idaoABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"execute"`.
 */
export function useIdaoExecute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof idaoABI, 'execute'>['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof idaoABI, 'execute'> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof idaoABI, 'execute'>({
    abi: idaoABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useIdaoIsValidSignature<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof idaoABI, 'isValidSignature'>['abi'],
        'isValidSignature'
      > & { functionName?: 'isValidSignature' }
    : UseContractWriteConfig<TMode, typeof idaoABI, 'isValidSignature'> & {
        abi?: never
        functionName?: 'isValidSignature'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof idaoABI, 'isValidSignature'>({
    abi: idaoABI,
    functionName: 'isValidSignature',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"registerStandardCallback"`.
 */
export function useIdaoRegisterStandardCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof idaoABI,
          'registerStandardCallback'
        >['abi'],
        'registerStandardCallback'
      > & { functionName?: 'registerStandardCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof idaoABI,
        'registerStandardCallback'
      > & {
        abi?: never
        functionName?: 'registerStandardCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof idaoABI, 'registerStandardCallback'>({
    abi: idaoABI,
    functionName: 'registerStandardCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setMetadata"`.
 */
export function useIdaoSetMetadata<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof idaoABI, 'setMetadata'>['abi'],
        'setMetadata'
      > & { functionName?: 'setMetadata' }
    : UseContractWriteConfig<TMode, typeof idaoABI, 'setMetadata'> & {
        abi?: never
        functionName?: 'setMetadata'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof idaoABI, 'setMetadata'>({
    abi: idaoABI,
    functionName: 'setMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setSignatureValidator"`.
 */
export function useIdaoSetSignatureValidator<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof idaoABI,
          'setSignatureValidator'
        >['abi'],
        'setSignatureValidator'
      > & { functionName?: 'setSignatureValidator' }
    : UseContractWriteConfig<TMode, typeof idaoABI, 'setSignatureValidator'> & {
        abi?: never
        functionName?: 'setSignatureValidator'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof idaoABI, 'setSignatureValidator'>({
    abi: idaoABI,
    functionName: 'setSignatureValidator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function useIdaoSetTrustedForwarder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof idaoABI,
          'setTrustedForwarder'
        >['abi'],
        'setTrustedForwarder'
      > & { functionName?: 'setTrustedForwarder' }
    : UseContractWriteConfig<TMode, typeof idaoABI, 'setTrustedForwarder'> & {
        abi?: never
        functionName?: 'setTrustedForwarder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof idaoABI, 'setTrustedForwarder'>({
    abi: idaoABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__.
 */
export function usePrepareIdaoWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareIdaoDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIdaoExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function usePrepareIdaoIsValidSignature(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'isValidSignature'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'isValidSignature',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'isValidSignature'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"registerStandardCallback"`.
 */
export function usePrepareIdaoRegisterStandardCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'registerStandardCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'registerStandardCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof idaoABI,
    'registerStandardCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setMetadata"`.
 */
export function usePrepareIdaoSetMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'setMetadata'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'setMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'setMetadata'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setSignatureValidator"`.
 */
export function usePrepareIdaoSetSignatureValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'setSignatureValidator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'setSignatureValidator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'setSignatureValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaoABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function usePrepareIdaoSetTrustedForwarder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaoABI, 'setTrustedForwarder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: idaoABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof idaoABI, 'setTrustedForwarder'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__.
 */
export function useIdaoEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: idaoABI, ...config } as UseContractEventConfig<
    typeof idaoABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"Deposited"`.
 */
export function useIdaoDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'Deposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"Executed"`.
 */
export function useIdaoExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'Executed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'Executed',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'Executed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"MetadataSet"`.
 */
export function useIdaoMetadataSetEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'MetadataSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'MetadataSet',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'MetadataSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"NativeTokenDeposited"`.
 */
export function useIdaoNativeTokenDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'NativeTokenDeposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'NativeTokenDeposited',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'NativeTokenDeposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"SignatureValidatorSet"`.
 */
export function useIdaoSignatureValidatorSetEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'SignatureValidatorSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'SignatureValidatorSet',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'SignatureValidatorSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"StandardCallbackRegistered"`.
 */
export function useIdaoStandardCallbackRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'StandardCallbackRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'StandardCallbackRegistered',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'StandardCallbackRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaoABI}__ and `eventName` set to `"TrustedForwarderSet"`.
 */
export function useIdaoTrustedForwarderSetEvent(
  config: Omit<
    UseContractEventConfig<typeof idaoABI, 'TrustedForwarderSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: idaoABI,
    eventName: 'TrustedForwarderSet',
    ...config,
  } as UseContractEventConfig<typeof idaoABI, 'TrustedForwarderSet'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc165UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc165UpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc165UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iPermissionConditionABI}__.
 */
export function useIPermissionCondition(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iPermissionConditionABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPermissionConditionABI}__.
 */
export function useIPermissionConditionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iPermissionConditionABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iPermissionConditionABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iPermissionConditionABI,
    ...config,
  } as UseContractReadConfig<
    typeof iPermissionConditionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPermissionConditionABI}__ and `functionName` set to `"isGranted"`.
 */
export function useIPermissionConditionIsGranted<
  TSelectData = ReadContractResult<typeof iPermissionConditionABI, 'isGranted'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iPermissionConditionABI,
      'isGranted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPermissionConditionABI,
    functionName: 'isGranted',
    ...config,
  } as UseContractReadConfig<
    typeof iPermissionConditionABI,
    'isGranted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ieip4824ABI}__.
 */
export function useIeip4824(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ieip4824ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ieip4824ABI}__.
 */
export function useIeip4824Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ieip4824ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ieip4824ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ieip4824ABI,
    ...config,
  } as UseContractReadConfig<typeof ieip4824ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ieip4824ABI}__ and `functionName` set to `"daoURI"`.
 */
export function useIeip4824DaoUri<
  TSelectData = ReadContractResult<typeof ieip4824ABI, 'daoURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ieip4824ABI, 'daoURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ieip4824ABI,
    functionName: 'daoURI',
    ...config,
  } as UseContractReadConfig<typeof ieip4824ABI, 'daoURI', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link permissionLibABI}__.
 */
export function usePermissionLib(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: permissionLibABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionLibABI}__.
 */
export function usePermissionLibRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof permissionLibABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof permissionLibABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionLibABI,
    ...config,
  } as UseContractReadConfig<
    typeof permissionLibABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionLibABI}__ and `functionName` set to `"NO_CONDITION"`.
 */
export function usePermissionLibNoCondition<
  TSelectData = ReadContractResult<typeof permissionLibABI, 'NO_CONDITION'>,
>(
  config: Omit<
    UseContractReadConfig<typeof permissionLibABI, 'NO_CONDITION', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionLibABI,
    functionName: 'NO_CONDITION',
    ...config,
  } as UseContractReadConfig<
    typeof permissionLibABI,
    'NO_CONDITION',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePermissionManager(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: permissionManagerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePermissionManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof permissionManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof permissionManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof permissionManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"ROOT_PERMISSION_ID"`.
 */
export function usePermissionManagerRootPermissionId<
  TSelectData = ReadContractResult<
    typeof permissionManagerABI,
    'ROOT_PERMISSION_ID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof permissionManagerABI,
      'ROOT_PERMISSION_ID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionManagerABI,
    functionName: 'ROOT_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof permissionManagerABI,
    'ROOT_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"isGranted"`.
 */
export function usePermissionManagerIsGranted<
  TSelectData = ReadContractResult<typeof permissionManagerABI, 'isGranted'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof permissionManagerABI,
      'isGranted',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: permissionManagerABI,
    functionName: 'isGranted',
    ...config,
  } as UseContractReadConfig<
    typeof permissionManagerABI,
    'isGranted',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePermissionManagerWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof permissionManagerABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof permissionManagerABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof permissionManagerABI, TFunctionName>({
    abi: permissionManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function usePermissionManagerApplyMultiTargetPermissions<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof permissionManagerABI,
          'applyMultiTargetPermissions'
        >['abi'],
        'applyMultiTargetPermissions'
      > & { functionName?: 'applyMultiTargetPermissions' }
    : UseContractWriteConfig<
        TMode,
        typeof permissionManagerABI,
        'applyMultiTargetPermissions'
      > & {
        abi?: never
        functionName?: 'applyMultiTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof permissionManagerABI,
    'applyMultiTargetPermissions'
  >({
    abi: permissionManagerABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function usePermissionManagerApplySingleTargetPermissions<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof permissionManagerABI,
          'applySingleTargetPermissions'
        >['abi'],
        'applySingleTargetPermissions'
      > & { functionName?: 'applySingleTargetPermissions' }
    : UseContractWriteConfig<
        TMode,
        typeof permissionManagerABI,
        'applySingleTargetPermissions'
      > & {
        abi?: never
        functionName?: 'applySingleTargetPermissions'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof permissionManagerABI,
    'applySingleTargetPermissions'
  >({
    abi: permissionManagerABI,
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"grant"`.
 */
export function usePermissionManagerGrant<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof permissionManagerABI, 'grant'>['abi'],
        'grant'
      > & { functionName?: 'grant' }
    : UseContractWriteConfig<TMode, typeof permissionManagerABI, 'grant'> & {
        abi?: never
        functionName?: 'grant'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof permissionManagerABI, 'grant'>({
    abi: permissionManagerABI,
    functionName: 'grant',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function usePermissionManagerGrantWithCondition<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof permissionManagerABI,
          'grantWithCondition'
        >['abi'],
        'grantWithCondition'
      > & { functionName?: 'grantWithCondition' }
    : UseContractWriteConfig<
        TMode,
        typeof permissionManagerABI,
        'grantWithCondition'
      > & {
        abi?: never
        functionName?: 'grantWithCondition'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof permissionManagerABI,
    'grantWithCondition'
  >({
    abi: permissionManagerABI,
    functionName: 'grantWithCondition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"revoke"`.
 */
export function usePermissionManagerRevoke<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof permissionManagerABI,
          'revoke'
        >['abi'],
        'revoke'
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<TMode, typeof permissionManagerABI, 'revoke'> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof permissionManagerABI, 'revoke'>({
    abi: permissionManagerABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePreparePermissionManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof permissionManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof permissionManagerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"applyMultiTargetPermissions"`.
 */
export function usePreparePermissionManagerApplyMultiTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof permissionManagerABI,
      'applyMultiTargetPermissions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'applyMultiTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof permissionManagerABI,
    'applyMultiTargetPermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"applySingleTargetPermissions"`.
 */
export function usePreparePermissionManagerApplySingleTargetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof permissionManagerABI,
      'applySingleTargetPermissions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'applySingleTargetPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof permissionManagerABI,
    'applySingleTargetPermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"grant"`.
 */
export function usePreparePermissionManagerGrant(
  config: Omit<
    UsePrepareContractWriteConfig<typeof permissionManagerABI, 'grant'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'grant',
    ...config,
  } as UsePrepareContractWriteConfig<typeof permissionManagerABI, 'grant'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"grantWithCondition"`.
 */
export function usePreparePermissionManagerGrantWithCondition(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof permissionManagerABI,
      'grantWithCondition'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'grantWithCondition',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof permissionManagerABI,
    'grantWithCondition'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link permissionManagerABI}__ and `functionName` set to `"revoke"`.
 */
export function usePreparePermissionManagerRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof permissionManagerABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: permissionManagerABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof permissionManagerABI, 'revoke'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link permissionManagerABI}__.
 */
export function usePermissionManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof permissionManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: permissionManagerABI,
    ...config,
  } as UseContractEventConfig<typeof permissionManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link permissionManagerABI}__ and `eventName` set to `"Granted"`.
 */
export function usePermissionManagerGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof permissionManagerABI, 'Granted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: permissionManagerABI,
    eventName: 'Granted',
    ...config,
  } as UseContractEventConfig<typeof permissionManagerABI, 'Granted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link permissionManagerABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePermissionManagerInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof permissionManagerABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: permissionManagerABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof permissionManagerABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link permissionManagerABI}__ and `eventName` set to `"Revoked"`.
 */
export function usePermissionManagerRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof permissionManagerABI, 'Revoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: permissionManagerABI,
    eventName: 'Revoked',
    ...config,
  } as UseContractEventConfig<typeof permissionManagerABI, 'Revoked'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iPluginABI}__.
 */
export function useIPlugin(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iPluginABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPluginABI}__.
 */
export function useIPluginRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPluginABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iPluginABI,
    ...config,
  } as UseContractReadConfig<typeof iPluginABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPluginABI}__ and `functionName` set to `"pluginType"`.
 */
export function useIPluginPluginType<
  TSelectData = ReadContractResult<typeof iPluginABI, 'pluginType'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPluginABI, 'pluginType', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPluginABI,
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<typeof iPluginABI, 'pluginType', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePluginUupsUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: pluginUupsUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePluginUupsUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"UPGRADE_PLUGIN_PERMISSION_ID"`.
 */
export function usePluginUupsUpgradeableUpgradePluginPermissionId<
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    'UPGRADE_PLUGIN_PERMISSION_ID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      'UPGRADE_PLUGIN_PERMISSION_ID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'UPGRADE_PLUGIN_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    'UPGRADE_PLUGIN_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"dao"`.
 */
export function usePluginUupsUpgradeableDao<
  TSelectData = ReadContractResult<typeof pluginUupsUpgradeableABI, 'dao'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginUupsUpgradeableABI, 'dao', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    'dao',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function usePluginUupsUpgradeableImplementation<
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    'implementation'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      'implementation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    'implementation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"pluginType"`.
 */
export function usePluginUupsUpgradeablePluginType<
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    'pluginType'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      'pluginType',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    'pluginType',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function usePluginUupsUpgradeableProxiableUuid<
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    'proxiableUUID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePluginUupsUpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof pluginUupsUpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginUupsUpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginUupsUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof pluginUupsUpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePluginUupsUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pluginUupsUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof pluginUupsUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof pluginUupsUpgradeableABI,
    TFunctionName
  >({ abi: pluginUupsUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePluginUupsUpgradeableUpgradeTo<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pluginUupsUpgradeableABI,
          'upgradeTo'
        >['abi'],
        'upgradeTo'
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<
        TMode,
        typeof pluginUupsUpgradeableABI,
        'upgradeTo'
      > & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pluginUupsUpgradeableABI, 'upgradeTo'>({
    abi: pluginUupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePluginUupsUpgradeableUpgradeToAndCall<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pluginUupsUpgradeableABI,
          'upgradeToAndCall'
        >['abi'],
        'upgradeToAndCall'
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        TMode,
        typeof pluginUupsUpgradeableABI,
        'upgradeToAndCall'
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof pluginUupsUpgradeableABI,
    'upgradeToAndCall'
  >({
    abi: pluginUupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePreparePluginUupsUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginUupsUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginUupsUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginUupsUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePreparePluginUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginUupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginUupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginUupsUpgradeableABI,
    'upgradeTo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePreparePluginUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginUupsUpgradeableABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginUupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginUupsUpgradeableABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__.
 */
export function usePluginUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pluginUupsUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof pluginUupsUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function usePluginUupsUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function usePluginUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<
    typeof pluginUupsUpgradeableABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePluginUupsUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pluginUupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function usePluginUupsUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pluginUupsUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof pluginUupsUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link callbackHandlerABI}__.
 */
export function useCallbackHandler(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: callbackHandlerABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link callbackHandlerABI}__.
 */
export function useCallbackHandlerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof callbackHandlerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: callbackHandlerABI,
    ...config,
  } as UseContractEventConfig<typeof callbackHandlerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link callbackHandlerABI}__ and `eventName` set to `"CallbackReceived"`.
 */
export function useCallbackHandlerCallbackReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof callbackHandlerABI, 'CallbackReceived'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: callbackHandlerABI,
    eventName: 'CallbackReceived',
    ...config,
  } as UseContractEventConfig<typeof callbackHandlerABI, 'CallbackReceived'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MintableUpgradeableABI}__.
 */
export function useIerc20MintableUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc20MintableUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MintableUpgradeableABI}__.
 */
export function useIerc20MintableUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20MintableUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc20MintableUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc20MintableUpgradeableABI,
    TFunctionName
  >({ abi: ierc20MintableUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MintableUpgradeableABI}__ and `functionName` set to `"mint"`.
 */
export function useIerc20MintableUpgradeableMint<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20MintableUpgradeableABI,
          'mint'
        >['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc20MintableUpgradeableABI,
        'mint'
      > & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MintableUpgradeableABI, 'mint'>({
    abi: ierc20MintableUpgradeableABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MintableUpgradeableABI}__.
 */
export function usePrepareIerc20MintableUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc20MintableUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MintableUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20MintableUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MintableUpgradeableABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareIerc20MintableUpgradeableMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MintableUpgradeableABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MintableUpgradeableABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20MintableUpgradeableABI,
    'mint'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__.
 */
export function useErc20WrapperUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc20WrapperUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__.
 */
export function useErc20WrapperUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc20WrapperUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WrapperUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WrapperUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20WrapperUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20WrapperUpgradeableAllowance<
  TSelectData = ReadContractResult<
    typeof erc20WrapperUpgradeableABI,
    'allowance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WrapperUpgradeableABI,
      'allowance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WrapperUpgradeableABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20WrapperUpgradeableBalanceOf<
  TSelectData = ReadContractResult<
    typeof erc20WrapperUpgradeableABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WrapperUpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WrapperUpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20WrapperUpgradeableDecimals<
  TSelectData = ReadContractResult<
    typeof erc20WrapperUpgradeableABI,
    'decimals'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WrapperUpgradeableABI,
      'decimals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WrapperUpgradeableABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20WrapperUpgradeableName<
  TSelectData = ReadContractResult<typeof erc20WrapperUpgradeableABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WrapperUpgradeableABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WrapperUpgradeableABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20WrapperUpgradeableSymbol<
  TSelectData = ReadContractResult<typeof erc20WrapperUpgradeableABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WrapperUpgradeableABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WrapperUpgradeableABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20WrapperUpgradeableTotalSupply<
  TSelectData = ReadContractResult<
    typeof erc20WrapperUpgradeableABI,
    'totalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WrapperUpgradeableABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WrapperUpgradeableABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"underlying"`.
 */
export function useErc20WrapperUpgradeableUnderlying<
  TSelectData = ReadContractResult<
    typeof erc20WrapperUpgradeableABI,
    'underlying'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WrapperUpgradeableABI,
      'underlying',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'underlying',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WrapperUpgradeableABI,
    'underlying',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__.
 */
export function useErc20WrapperUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20WrapperUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc20WrapperUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20WrapperUpgradeableABI,
    TFunctionName
  >({ abi: erc20WrapperUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20WrapperUpgradeableApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20WrapperUpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20WrapperUpgradeableABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20WrapperUpgradeableABI, 'approve'>({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20WrapperUpgradeableDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20WrapperUpgradeableABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20WrapperUpgradeableABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20WrapperUpgradeableABI,
    'decreaseAllowance'
  >({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"depositFor"`.
 */
export function useErc20WrapperUpgradeableDepositFor<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20WrapperUpgradeableABI,
          'depositFor'
        >['abi'],
        'depositFor'
      > & { functionName?: 'depositFor' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20WrapperUpgradeableABI,
        'depositFor'
      > & {
        abi?: never
        functionName?: 'depositFor'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20WrapperUpgradeableABI,
    'depositFor'
  >({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'depositFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20WrapperUpgradeableIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20WrapperUpgradeableABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20WrapperUpgradeableABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20WrapperUpgradeableABI,
    'increaseAllowance'
  >({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20WrapperUpgradeableTransfer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20WrapperUpgradeableABI,
          'transfer'
        >['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20WrapperUpgradeableABI,
        'transfer'
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20WrapperUpgradeableABI, 'transfer'>(
    {
      abi: erc20WrapperUpgradeableABI,
      functionName: 'transfer',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20WrapperUpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20WrapperUpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20WrapperUpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20WrapperUpgradeableABI,
    'transferFrom'
  >({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useErc20WrapperUpgradeableWithdrawTo<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20WrapperUpgradeableABI,
          'withdrawTo'
        >['abi'],
        'withdrawTo'
      > & { functionName?: 'withdrawTo' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20WrapperUpgradeableABI,
        'withdrawTo'
      > & {
        abi?: never
        functionName?: 'withdrawTo'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20WrapperUpgradeableABI,
    'withdrawTo'
  >({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'withdrawTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__.
 */
export function usePrepareErc20WrapperUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20WrapperUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20WrapperUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20WrapperUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20WrapperUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20WrapperUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20WrapperUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20WrapperUpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20WrapperUpgradeableABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20WrapperUpgradeableABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"depositFor"`.
 */
export function usePrepareErc20WrapperUpgradeableDepositFor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20WrapperUpgradeableABI,
      'depositFor'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'depositFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20WrapperUpgradeableABI,
    'depositFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20WrapperUpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20WrapperUpgradeableABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20WrapperUpgradeableABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20WrapperUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20WrapperUpgradeableABI,
      'transfer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20WrapperUpgradeableABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20WrapperUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20WrapperUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20WrapperUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareErc20WrapperUpgradeableWithdrawTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20WrapperUpgradeableABI,
      'withdrawTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20WrapperUpgradeableABI,
    functionName: 'withdrawTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20WrapperUpgradeableABI,
    'withdrawTo'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__.
 */
export function useErc20WrapperUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20WrapperUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20WrapperUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20WrapperUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20WrapperUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20WrapperUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20WrapperUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20WrapperUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20WrapperUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20WrapperUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20WrapperUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc20WrapperUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20WrapperUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20WrapperUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20WrapperUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20WrapperUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20WrapperUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__.
 */
export function useErc20VotesUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc20VotesUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__.
 */
export function useErc20VotesUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20VotesUpgradeableDomainSeparator<
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    'DOMAIN_SEPARATOR'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'DOMAIN_SEPARATOR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20VotesUpgradeableAllowance<
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    'allowance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'allowance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20VotesUpgradeableBalanceOf<
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useErc20VotesUpgradeableCheckpoints<
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    'checkpoints'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'checkpoints',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'checkpoints',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20VotesUpgradeableDecimals<
  TSelectData = ReadContractResult<typeof erc20VotesUpgradeableABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'decimals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"delegates"`.
 */
export function useErc20VotesUpgradeableDelegates<
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    'delegates'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'delegates',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'delegates',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useErc20VotesUpgradeableGetPastTotalSupply<
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    'getPastTotalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'getPastTotalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'getPastTotalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useErc20VotesUpgradeableGetPastVotes<
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    'getPastVotes'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'getPastVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'getPastVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"getVotes"`.
 */
export function useErc20VotesUpgradeableGetVotes<
  TSelectData = ReadContractResult<typeof erc20VotesUpgradeableABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'getVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'getVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20VotesUpgradeableName<
  TSelectData = ReadContractResult<typeof erc20VotesUpgradeableABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20VotesUpgradeableABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20VotesUpgradeableNonces<
  TSelectData = ReadContractResult<typeof erc20VotesUpgradeableABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'nonces',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'nonces',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useErc20VotesUpgradeableNumCheckpoints<
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    'numCheckpoints'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'numCheckpoints',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'numCheckpoints',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20VotesUpgradeableSymbol<
  TSelectData = ReadContractResult<typeof erc20VotesUpgradeableABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20VotesUpgradeableTotalSupply<
  TSelectData = ReadContractResult<
    typeof erc20VotesUpgradeableABI,
    'totalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20VotesUpgradeableABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20VotesUpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20VotesUpgradeableABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__.
 */
export function useErc20VotesUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc20VotesUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >({ abi: erc20VotesUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20VotesUpgradeableApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20VotesUpgradeableABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20VotesUpgradeableABI, 'approve'>({
    abi: erc20VotesUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20VotesUpgradeableDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20VotesUpgradeableABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20VotesUpgradeableABI,
    'decreaseAllowance'
  >({
    abi: erc20VotesUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"delegate"`.
 */
export function useErc20VotesUpgradeableDelegate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'delegate'
        >['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20VotesUpgradeableABI,
        'delegate'
      > & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20VotesUpgradeableABI, 'delegate'>({
    abi: erc20VotesUpgradeableABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useErc20VotesUpgradeableDelegateBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'delegateBySig'
        >['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20VotesUpgradeableABI,
        'delegateBySig'
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20VotesUpgradeableABI,
    'delegateBySig'
  >({
    abi: erc20VotesUpgradeableABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20VotesUpgradeableIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20VotesUpgradeableABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20VotesUpgradeableABI,
    'increaseAllowance'
  >({
    abi: erc20VotesUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20VotesUpgradeablePermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'permit'
        >['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20VotesUpgradeableABI,
        'permit'
      > & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20VotesUpgradeableABI, 'permit'>({
    abi: erc20VotesUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20VotesUpgradeableTransfer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'transfer'
        >['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20VotesUpgradeableABI,
        'transfer'
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20VotesUpgradeableABI, 'transfer'>({
    abi: erc20VotesUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20VotesUpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20VotesUpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20VotesUpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20VotesUpgradeableABI,
    'transferFrom'
  >({
    abi: erc20VotesUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__.
 */
export function usePrepareErc20VotesUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20VotesUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20VotesUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20VotesUpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20VotesUpgradeableABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareErc20VotesUpgradeableDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesUpgradeableABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'delegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareErc20VotesUpgradeableDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20VotesUpgradeableABI,
      'delegateBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'delegateBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20VotesUpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20VotesUpgradeableABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20VotesUpgradeablePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesUpgradeableABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20VotesUpgradeableABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20VotesUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20VotesUpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20VotesUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20VotesUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20VotesUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20VotesUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__.
 */
export function useErc20VotesUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20VotesUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20VotesUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useErc20VotesUpgradeableDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc20VotesUpgradeableABI,
    'DelegateChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useErc20VotesUpgradeableDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc20VotesUpgradeableABI,
      'DelegateVotesChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc20VotesUpgradeableABI,
    'DelegateVotesChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20VotesUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20VotesUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20VotesUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20VotesUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20VotesUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc20PermitUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20PermitUpgradeableDomainSeparator<
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    'DOMAIN_SEPARATOR'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      'DOMAIN_SEPARATOR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PermitUpgradeableAllowance<
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    'allowance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      'allowance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PermitUpgradeableBalanceOf<
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PermitUpgradeableDecimals<
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    'decimals'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      'decimals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PermitUpgradeableName<
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20PermitUpgradeableNonces<
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      'nonces',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    'nonces',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PermitUpgradeableSymbol<
  TSelectData = ReadContractResult<typeof erc20PermitUpgradeableABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PermitUpgradeableTotalSupply<
  TSelectData = ReadContractResult<
    typeof erc20PermitUpgradeableABI,
    'totalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PermitUpgradeableABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PermitUpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20PermitUpgradeableABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc20PermitUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >({ abi: erc20PermitUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PermitUpgradeableApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PermitUpgradeableABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitUpgradeableABI, 'approve'>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PermitUpgradeableDecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PermitUpgradeableABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PermitUpgradeableABI,
    'decreaseAllowance'
  >({
    abi: erc20PermitUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PermitUpgradeableIncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PermitUpgradeableABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PermitUpgradeableABI,
    'increaseAllowance'
  >({
    abi: erc20PermitUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20PermitUpgradeablePermit<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          'permit'
        >['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PermitUpgradeableABI,
        'permit'
      > & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitUpgradeableABI, 'permit'>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PermitUpgradeableTransfer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          'transfer'
        >['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PermitUpgradeableABI,
        'transfer'
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20PermitUpgradeableABI, 'transfer'>({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PermitUpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc20PermitUpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc20PermitUpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc20PermitUpgradeableABI,
    'transferFrom'
  >({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function usePrepareErc20PermitUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PermitUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PermitUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PermitUpgradeableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PermitUpgradeableABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PermitUpgradeableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PermitUpgradeableABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20PermitUpgradeablePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    'permit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PermitUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PermitUpgradeableABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PermitUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PermitUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PermitUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20PermitUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__.
 */
export function useErc20PermitUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PermitUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc20PermitUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PermitUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PermitUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PermitUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20PermitUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc20MetadataUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataUpgradeableAllowance<
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    'allowance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      'allowance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataUpgradeableBalanceOf<
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataUpgradeableDecimals<
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    'decimals'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      'decimals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataUpgradeableName<
  TSelectData = ReadContractResult<typeof ierc20MetadataUpgradeableABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataUpgradeableSymbol<
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    'symbol'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataUpgradeableTotalSupply<
  TSelectData = ReadContractResult<
    typeof ierc20MetadataUpgradeableABI,
    'totalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20MetadataUpgradeableABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataUpgradeableABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20MetadataUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc20MetadataUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName
  >({ abi: ierc20MetadataUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataUpgradeableApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20MetadataUpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc20MetadataUpgradeableABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc20MetadataUpgradeableABI,
    'approve'
  >({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataUpgradeableTransfer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20MetadataUpgradeableABI,
          'transfer'
        >['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc20MetadataUpgradeableABI,
        'transfer'
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc20MetadataUpgradeableABI,
    'transfer'
  >({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataUpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20MetadataUpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc20MetadataUpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc20MetadataUpgradeableABI,
    'transferFrom'
  >({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function usePrepareIerc20MetadataUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc20MetadataUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc20MetadataUpgradeableABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataUpgradeableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc20MetadataUpgradeableABI,
      'transfer'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataUpgradeableABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc20MetadataUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__.
 */
export function useIerc20MetadataUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc20PermitUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20PermitUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitUpgradeableDomainSeparator<
  TSelectData = ReadContractResult<
    typeof ierc20PermitUpgradeableABI,
    'DOMAIN_SEPARATOR'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20PermitUpgradeableABI,
      'DOMAIN_SEPARATOR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitUpgradeableABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitUpgradeableNonces<
  TSelectData = ReadContractResult<typeof ierc20PermitUpgradeableABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc20PermitUpgradeableABI,
      'nonces',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20PermitUpgradeableABI,
    'nonces',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function useIerc20PermitUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20PermitUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc20PermitUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >({ abi: ierc20PermitUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitUpgradeablePermit<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20PermitUpgradeableABI,
          'permit'
        >['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc20PermitUpgradeableABI,
        'permit'
      > & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitUpgradeableABI, 'permit'>({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__.
 */
export function usePrepareIerc20PermitUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc20PermitUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20PermitUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitUpgradeableABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitUpgradeablePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitUpgradeableABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitUpgradeableABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20PermitUpgradeableABI,
    'permit'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iProposalABI}__.
 */
export function useIProposal(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iProposalABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProposalABI}__.
 */
export function useIProposalRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iProposalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iProposalABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iProposalABI,
    ...config,
  } as UseContractReadConfig<typeof iProposalABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProposalABI}__ and `functionName` set to `"proposalCount"`.
 */
export function useIProposalProposalCount<
  TSelectData = ReadContractResult<typeof iProposalABI, 'proposalCount'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iProposalABI, 'proposalCount', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iProposalABI,
    functionName: 'proposalCount',
    ...config,
  } as UseContractReadConfig<typeof iProposalABI, 'proposalCount', TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProposalABI}__.
 */
export function useIProposalEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iProposalABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iProposalABI,
    ...config,
  } as UseContractEventConfig<typeof iProposalABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProposalABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useIProposalProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iProposalABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iProposalABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof iProposalABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iProposalABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useIProposalProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof iProposalABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iProposalABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof iProposalABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link proposalUpgradeableABI}__.
 */
export function useProposalUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: proposalUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link proposalUpgradeableABI}__.
 */
export function useProposalUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof proposalUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof proposalUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: proposalUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof proposalUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `functionName` set to `"proposalCount"`.
 */
export function useProposalUpgradeableProposalCount<
  TSelectData = ReadContractResult<
    typeof proposalUpgradeableABI,
    'proposalCount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof proposalUpgradeableABI,
      'proposalCount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: proposalUpgradeableABI,
    functionName: 'proposalCount',
    ...config,
  } as UseContractReadConfig<
    typeof proposalUpgradeableABI,
    'proposalCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useProposalUpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof proposalUpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof proposalUpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: proposalUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof proposalUpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proposalUpgradeableABI}__.
 */
export function useProposalUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof proposalUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: proposalUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof proposalUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useProposalUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof proposalUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: proposalUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof proposalUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useProposalUpgradeableProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof proposalUpgradeableABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: proposalUpgradeableABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof proposalUpgradeableABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proposalUpgradeableABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useProposalUpgradeableProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof proposalUpgradeableABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: proposalUpgradeableABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<
    typeof proposalUpgradeableABI,
    'ProposalExecuted'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function useIMajorityVoting(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iMajorityVotingABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function useIMajorityVotingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"canExecute"`.
 */
export function useIMajorityVotingCanExecute<
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, 'canExecute'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMajorityVotingABI, 'canExecute', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'canExecute',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    'canExecute',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"canVote"`.
 */
export function useIMajorityVotingCanVote<
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, 'canVote'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMajorityVotingABI, 'canVote', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'canVote',
    ...config,
  } as UseContractReadConfig<typeof iMajorityVotingABI, 'canVote', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"getVoteOption"`.
 */
export function useIMajorityVotingGetVoteOption<
  TSelectData = ReadContractResult<typeof iMajorityVotingABI, 'getVoteOption'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      'getVoteOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'getVoteOption',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    'getVoteOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"isMinParticipationReached"`.
 */
export function useIMajorityVotingIsMinParticipationReached<
  TSelectData = ReadContractResult<
    typeof iMajorityVotingABI,
    'isMinParticipationReached'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      'isMinParticipationReached',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'isMinParticipationReached',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    'isMinParticipationReached',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"isSupportThresholdReached"`.
 */
export function useIMajorityVotingIsSupportThresholdReached<
  TSelectData = ReadContractResult<
    typeof iMajorityVotingABI,
    'isSupportThresholdReached'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      'isSupportThresholdReached',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'isSupportThresholdReached',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    'isSupportThresholdReached',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"isSupportThresholdReachedEarly"`.
 */
export function useIMajorityVotingIsSupportThresholdReachedEarly<
  TSelectData = ReadContractResult<
    typeof iMajorityVotingABI,
    'isSupportThresholdReachedEarly'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      'isSupportThresholdReachedEarly',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'isSupportThresholdReachedEarly',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    'isSupportThresholdReachedEarly',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"minParticipation"`.
 */
export function useIMajorityVotingMinParticipation<
  TSelectData = ReadContractResult<
    typeof iMajorityVotingABI,
    'minParticipation'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      'minParticipation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'minParticipation',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    'minParticipation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"supportThreshold"`.
 */
export function useIMajorityVotingSupportThreshold<
  TSelectData = ReadContractResult<
    typeof iMajorityVotingABI,
    'supportThreshold'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMajorityVotingABI,
      'supportThreshold',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMajorityVotingABI,
    functionName: 'supportThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof iMajorityVotingABI,
    'supportThreshold',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function useIMajorityVotingWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMajorityVotingABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iMajorityVotingABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMajorityVotingABI, TFunctionName>({
    abi: iMajorityVotingABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"execute"`.
 */
export function useIMajorityVotingExecute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMajorityVotingABI, 'execute'>['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof iMajorityVotingABI, 'execute'> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMajorityVotingABI, 'execute'>({
    abi: iMajorityVotingABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"vote"`.
 */
export function useIMajorityVotingVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMajorityVotingABI, 'vote'>['abi'],
        'vote'
      > & { functionName?: 'vote' }
    : UseContractWriteConfig<TMode, typeof iMajorityVotingABI, 'vote'> & {
        abi?: never
        functionName?: 'vote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMajorityVotingABI, 'vote'>({
    abi: iMajorityVotingABI,
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function usePrepareIMajorityVotingWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMajorityVotingABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMajorityVotingABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMajorityVotingABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIMajorityVotingExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMajorityVotingABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMajorityVotingABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMajorityVotingABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMajorityVotingABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareIMajorityVotingVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMajorityVotingABI, 'vote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMajorityVotingABI,
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMajorityVotingABI, 'vote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMajorityVotingABI}__.
 */
export function useIMajorityVotingEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iMajorityVotingABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMajorityVotingABI,
    ...config,
  } as UseContractEventConfig<typeof iMajorityVotingABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMajorityVotingABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useIMajorityVotingVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof iMajorityVotingABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMajorityVotingABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof iMajorityVotingABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function useMajorityVotingBase(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: majorityVotingBaseABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function useMajorityVotingBaseRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"UPDATE_VOTING_SETTINGS_PERMISSION_ID"`.
 */
export function useMajorityVotingBaseUpdateVotingSettingsPermissionId<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'UPDATE_VOTING_SETTINGS_PERMISSION_ID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'UPDATE_VOTING_SETTINGS_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"UPGRADE_PLUGIN_PERMISSION_ID"`.
 */
export function useMajorityVotingBaseUpgradePluginPermissionId<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'UPGRADE_PLUGIN_PERMISSION_ID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'UPGRADE_PLUGIN_PERMISSION_ID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'UPGRADE_PLUGIN_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'UPGRADE_PLUGIN_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"canExecute"`.
 */
export function useMajorityVotingBaseCanExecute<
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, 'canExecute'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'canExecute',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'canExecute',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'canExecute',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"canVote"`.
 */
export function useMajorityVotingBaseCanVote<
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, 'canVote'>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, 'canVote', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'canVote',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'canVote',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"dao"`.
 */
export function useMajorityVotingBaseDao<
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, 'dao'>,
>(
  config: Omit<
    UseContractReadConfig<typeof majorityVotingBaseABI, 'dao', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<typeof majorityVotingBaseABI, 'dao', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"getProposal"`.
 */
export function useMajorityVotingBaseGetProposal<
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, 'getProposal'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'getProposal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'getProposal',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'getProposal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"getVoteOption"`.
 */
export function useMajorityVotingBaseGetVoteOption<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'getVoteOption'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'getVoteOption',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'getVoteOption',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'getVoteOption',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"implementation"`.
 */
export function useMajorityVotingBaseImplementation<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'implementation'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'implementation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'implementation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"isMinParticipationReached"`.
 */
export function useMajorityVotingBaseIsMinParticipationReached<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'isMinParticipationReached'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'isMinParticipationReached',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'isMinParticipationReached',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'isMinParticipationReached',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"isSupportThresholdReached"`.
 */
export function useMajorityVotingBaseIsSupportThresholdReached<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'isSupportThresholdReached'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'isSupportThresholdReached',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'isSupportThresholdReached',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'isSupportThresholdReached',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"isSupportThresholdReachedEarly"`.
 */
export function useMajorityVotingBaseIsSupportThresholdReachedEarly<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'isSupportThresholdReachedEarly'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'isSupportThresholdReachedEarly',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'isSupportThresholdReachedEarly',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'isSupportThresholdReachedEarly',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"minDuration"`.
 */
export function useMajorityVotingBaseMinDuration<
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, 'minDuration'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'minDuration',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'minDuration',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'minDuration',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"minParticipation"`.
 */
export function useMajorityVotingBaseMinParticipation<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'minParticipation'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'minParticipation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'minParticipation',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'minParticipation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"minProposerVotingPower"`.
 */
export function useMajorityVotingBaseMinProposerVotingPower<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'minProposerVotingPower'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'minProposerVotingPower',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'minProposerVotingPower',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'minProposerVotingPower',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"pluginType"`.
 */
export function useMajorityVotingBasePluginType<
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, 'pluginType'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'pluginType',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'pluginType',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'pluginType',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"proposalCount"`.
 */
export function useMajorityVotingBaseProposalCount<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'proposalCount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'proposalCount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'proposalCount',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'proposalCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useMajorityVotingBaseProxiableUuid<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'proxiableUUID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"supportThreshold"`.
 */
export function useMajorityVotingBaseSupportThreshold<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'supportThreshold'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'supportThreshold',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'supportThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'supportThreshold',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMajorityVotingBaseSupportsInterface<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"totalVotingPower"`.
 */
export function useMajorityVotingBaseTotalVotingPower<
  TSelectData = ReadContractResult<
    typeof majorityVotingBaseABI,
    'totalVotingPower'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'totalVotingPower',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'totalVotingPower',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'totalVotingPower',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"votingMode"`.
 */
export function useMajorityVotingBaseVotingMode<
  TSelectData = ReadContractResult<typeof majorityVotingBaseABI, 'votingMode'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof majorityVotingBaseABI,
      'votingMode',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: majorityVotingBaseABI,
    functionName: 'votingMode',
    ...config,
  } as UseContractReadConfig<
    typeof majorityVotingBaseABI,
    'votingMode',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function useMajorityVotingBaseWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof majorityVotingBaseABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof majorityVotingBaseABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof majorityVotingBaseABI, TFunctionName>({
    abi: majorityVotingBaseABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"createProposal"`.
 */
export function useMajorityVotingBaseCreateProposal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof majorityVotingBaseABI,
          'createProposal'
        >['abi'],
        'createProposal'
      > & { functionName?: 'createProposal' }
    : UseContractWriteConfig<
        TMode,
        typeof majorityVotingBaseABI,
        'createProposal'
      > & {
        abi?: never
        functionName?: 'createProposal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof majorityVotingBaseABI,
    'createProposal'
  >({
    abi: majorityVotingBaseABI,
    functionName: 'createProposal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"execute"`.
 */
export function useMajorityVotingBaseExecute<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof majorityVotingBaseABI,
          'execute'
        >['abi'],
        'execute'
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<TMode, typeof majorityVotingBaseABI, 'execute'> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof majorityVotingBaseABI, 'execute'>({
    abi: majorityVotingBaseABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"updateVotingSettings"`.
 */
export function useMajorityVotingBaseUpdateVotingSettings<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof majorityVotingBaseABI,
          'updateVotingSettings'
        >['abi'],
        'updateVotingSettings'
      > & { functionName?: 'updateVotingSettings' }
    : UseContractWriteConfig<
        TMode,
        typeof majorityVotingBaseABI,
        'updateVotingSettings'
      > & {
        abi?: never
        functionName?: 'updateVotingSettings'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof majorityVotingBaseABI,
    'updateVotingSettings'
  >({
    abi: majorityVotingBaseABI,
    functionName: 'updateVotingSettings',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useMajorityVotingBaseUpgradeTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof majorityVotingBaseABI,
          'upgradeTo'
        >['abi'],
        'upgradeTo'
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<
        TMode,
        typeof majorityVotingBaseABI,
        'upgradeTo'
      > & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof majorityVotingBaseABI, 'upgradeTo'>({
    abi: majorityVotingBaseABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useMajorityVotingBaseUpgradeToAndCall<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof majorityVotingBaseABI,
          'upgradeToAndCall'
        >['abi'],
        'upgradeToAndCall'
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        TMode,
        typeof majorityVotingBaseABI,
        'upgradeToAndCall'
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof majorityVotingBaseABI,
    'upgradeToAndCall'
  >({
    abi: majorityVotingBaseABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"vote"`.
 */
export function useMajorityVotingBaseVote<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof majorityVotingBaseABI, 'vote'>['abi'],
        'vote'
      > & { functionName?: 'vote' }
    : UseContractWriteConfig<TMode, typeof majorityVotingBaseABI, 'vote'> & {
        abi?: never
        functionName?: 'vote'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof majorityVotingBaseABI, 'vote'>({
    abi: majorityVotingBaseABI,
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function usePrepareMajorityVotingBaseWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof majorityVotingBaseABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"createProposal"`.
 */
export function usePrepareMajorityVotingBaseCreateProposal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof majorityVotingBaseABI,
      'createProposal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'createProposal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof majorityVotingBaseABI,
    'createProposal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareMajorityVotingBaseExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"updateVotingSettings"`.
 */
export function usePrepareMajorityVotingBaseUpdateVotingSettings(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof majorityVotingBaseABI,
      'updateVotingSettings'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'updateVotingSettings',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof majorityVotingBaseABI,
    'updateVotingSettings'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareMajorityVotingBaseUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareMajorityVotingBaseUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof majorityVotingBaseABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof majorityVotingBaseABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareMajorityVotingBaseVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'vote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: majorityVotingBaseABI,
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof majorityVotingBaseABI, 'vote'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__.
 */
export function useMajorityVotingBaseEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useMajorityVotingBaseAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useMajorityVotingBaseBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMajorityVotingBaseInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useMajorityVotingBaseProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useMajorityVotingBaseProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useMajorityVotingBaseUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useMajorityVotingBaseVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof majorityVotingBaseABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof majorityVotingBaseABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link majorityVotingBaseABI}__ and `eventName` set to `"VotingSettingsUpdated"`.
 */
export function useMajorityVotingBaseVotingSettingsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof majorityVotingBaseABI,
      'VotingSettingsUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: majorityVotingBaseABI,
    eventName: 'VotingSettingsUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof majorityVotingBaseABI,
    'VotingSettingsUpdated'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMembershipABI}__.
 */
export function useIMembership(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iMembershipABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMembershipABI}__.
 */
export function useIMembershipRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMembershipABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMembershipABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMembershipABI,
    ...config,
  } as UseContractReadConfig<typeof iMembershipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMembershipABI}__ and `functionName` set to `"isMember"`.
 */
export function useIMembershipIsMember<
  TSelectData = ReadContractResult<typeof iMembershipABI, 'isMember'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMembershipABI, 'isMember', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMembershipABI,
    functionName: 'isMember',
    ...config,
  } as UseContractReadConfig<typeof iMembershipABI, 'isMember', TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMembershipABI}__.
 */
export function useIMembershipEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iMembershipABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMembershipABI,
    ...config,
  } as UseContractEventConfig<typeof iMembershipABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMembershipABI}__ and `eventName` set to `"MembersAdded"`.
 */
export function useIMembershipMembersAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof iMembershipABI, 'MembersAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMembershipABI,
    eventName: 'MembersAdded',
    ...config,
  } as UseContractEventConfig<typeof iMembershipABI, 'MembersAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMembershipABI}__ and `eventName` set to `"MembersRemoved"`.
 */
export function useIMembershipMembersRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof iMembershipABI, 'MembersRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMembershipABI,
    eventName: 'MembersRemoved',
    ...config,
  } as UseContractEventConfig<typeof iMembershipABI, 'MembersRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iMembershipABI}__ and `eventName` set to `"MembershipContractAnnounced"`.
 */
export function useIMembershipMembershipContractAnnouncedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iMembershipABI,
      'MembershipContractAnnounced'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iMembershipABI,
    eventName: 'MembershipContractAnnounced',
    ...config,
  } as UseContractEventConfig<
    typeof iMembershipABI,
    'MembershipContractAnnounced'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__.
 */
export function useDaoAuthorizableUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: daoAuthorizableUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__.
 */
export function useDaoAuthorizableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof daoAuthorizableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof daoAuthorizableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: daoAuthorizableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof daoAuthorizableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__ and `functionName` set to `"dao"`.
 */
export function useDaoAuthorizableUpgradeableDao<
  TSelectData = ReadContractResult<typeof daoAuthorizableUpgradeableABI, 'dao'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof daoAuthorizableUpgradeableABI,
      'dao',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: daoAuthorizableUpgradeableABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<
    typeof daoAuthorizableUpgradeableABI,
    'dao',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__.
 */
export function useDaoAuthorizableUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof daoAuthorizableUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoAuthorizableUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof daoAuthorizableUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoAuthorizableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useDaoAuthorizableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoAuthorizableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: daoAuthorizableUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof daoAuthorizableUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link governanceErc20ABI}__.
 */
export function useGovernanceErc20(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: governanceErc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__.
 */
export function useGovernanceErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governanceErc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useGovernanceErc20DomainSeparator<
  TSelectData = ReadContractResult<
    typeof governanceErc20ABI,
    'DOMAIN_SEPARATOR'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceErc20ABI,
      'DOMAIN_SEPARATOR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"MINT_PERMISSION_ID"`.
 */
export function useGovernanceErc20MintPermissionId<
  TSelectData = ReadContractResult<
    typeof governanceErc20ABI,
    'MINT_PERMISSION_ID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceErc20ABI,
      'MINT_PERMISSION_ID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'MINT_PERMISSION_ID',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'MINT_PERMISSION_ID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useGovernanceErc20Allowance<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governanceErc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useGovernanceErc20BalanceOf<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governanceErc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useGovernanceErc20Checkpoints<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'checkpoints'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceErc20ABI,
      'checkpoints',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'checkpoints',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"dao"`.
 */
export function useGovernanceErc20Dao<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'dao'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governanceErc20ABI, 'dao', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'dao',
    ...config,
  } as UseContractReadConfig<typeof governanceErc20ABI, 'dao', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useGovernanceErc20Decimals<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governanceErc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"delegates"`.
 */
export function useGovernanceErc20Delegates<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'delegates'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governanceErc20ABI, 'delegates', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'delegates',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useGovernanceErc20GetPastTotalSupply<
  TSelectData = ReadContractResult<
    typeof governanceErc20ABI,
    'getPastTotalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceErc20ABI,
      'getPastTotalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'getPastTotalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useGovernanceErc20GetPastVotes<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'getPastVotes'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceErc20ABI,
      'getPastVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'getPastVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernanceErc20GetVotes<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'getVotes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governanceErc20ABI, 'getVotes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'getVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"name"`.
 */
export function useGovernanceErc20Name<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governanceErc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof governanceErc20ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"nonces"`.
 */
export function useGovernanceErc20Nonces<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governanceErc20ABI, 'nonces', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof governanceErc20ABI, 'nonces', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useGovernanceErc20NumCheckpoints<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'numCheckpoints'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceErc20ABI,
      'numCheckpoints',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'numCheckpoints',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernanceErc20SupportsInterface<
  TSelectData = ReadContractResult<
    typeof governanceErc20ABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceErc20ABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useGovernanceErc20Symbol<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof governanceErc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof governanceErc20ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useGovernanceErc20TotalSupply<
  TSelectData = ReadContractResult<typeof governanceErc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceErc20ABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceErc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof governanceErc20ABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__.
 */
export function useGovernanceErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governanceErc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof governanceErc20ABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceErc20ABI, TFunctionName>({
    abi: governanceErc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useGovernanceErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governanceErc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof governanceErc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceErc20ABI, 'approve'>({
    abi: governanceErc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useGovernanceErc20DecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceErc20ABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceErc20ABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governanceErc20ABI,
    'decreaseAllowance'
  >({
    abi: governanceErc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"delegate"`.
 */
export function useGovernanceErc20Delegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceErc20ABI,
          'delegate'
        >['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof governanceErc20ABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceErc20ABI, 'delegate'>({
    abi: governanceErc20ABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useGovernanceErc20DelegateBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceErc20ABI,
          'delegateBySig'
        >['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceErc20ABI,
        'delegateBySig'
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceErc20ABI, 'delegateBySig'>({
    abi: governanceErc20ABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useGovernanceErc20IncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceErc20ABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceErc20ABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governanceErc20ABI,
    'increaseAllowance'
  >({
    abi: governanceErc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"initialize"`.
 */
export function useGovernanceErc20Initialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceErc20ABI,
          'initialize'
        >['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof governanceErc20ABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceErc20ABI, 'initialize'>({
    abi: governanceErc20ABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"mint"`.
 */
export function useGovernanceErc20Mint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governanceErc20ABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof governanceErc20ABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceErc20ABI, 'mint'>({
    abi: governanceErc20ABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"permit"`.
 */
export function useGovernanceErc20Permit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof governanceErc20ABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof governanceErc20ABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceErc20ABI, 'permit'>({
    abi: governanceErc20ABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useGovernanceErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceErc20ABI,
          'transfer'
        >['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof governanceErc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceErc20ABI, 'transfer'>({
    abi: governanceErc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useGovernanceErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceErc20ABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceErc20ABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceErc20ABI, 'transferFrom'>({
    abi: governanceErc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__.
 */
export function usePrepareGovernanceErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceErc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceErc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceErc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareGovernanceErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceErc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareGovernanceErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceErc20ABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceErc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceErc20ABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareGovernanceErc20Delegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceErc20ABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareGovernanceErc20DelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceErc20ABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceErc20ABI,
    'delegateBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareGovernanceErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceErc20ABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceErc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceErc20ABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareGovernanceErc20Initialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceErc20ABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareGovernanceErc20Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceErc20ABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareGovernanceErc20Permit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceErc20ABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareGovernanceErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceErc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareGovernanceErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceErc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceErc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceErc20ABI}__.
 */
export function useGovernanceErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governanceErc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceErc20ABI,
    ...config,
  } as UseContractEventConfig<typeof governanceErc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceErc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useGovernanceErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceErc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceErc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof governanceErc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceErc20ABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useGovernanceErc20DelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceErc20ABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceErc20ABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof governanceErc20ABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceErc20ABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useGovernanceErc20DelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceErc20ABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceErc20ABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<
    typeof governanceErc20ABI,
    'DelegateVotesChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceErc20ABI}__ and `eventName` set to `"Initialized"`.
 */
export function useGovernanceErc20InitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceErc20ABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceErc20ABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof governanceErc20ABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceErc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useGovernanceErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceErc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceErc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof governanceErc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link governanceWrappedErc20ABI}__.
 */
export function useGovernanceWrappedErc20(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: governanceWrappedErc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__.
 */
export function useGovernanceWrappedErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useGovernanceWrappedErc20DomainSeparator<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'DOMAIN_SEPARATOR'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'DOMAIN_SEPARATOR',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'DOMAIN_SEPARATOR',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useGovernanceWrappedErc20Allowance<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'allowance'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'allowance',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useGovernanceWrappedErc20BalanceOf<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"checkpoints"`.
 */
export function useGovernanceWrappedErc20Checkpoints<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'checkpoints'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'checkpoints',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'checkpoints',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'checkpoints',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useGovernanceWrappedErc20Decimals<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'decimals'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'decimals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"delegates"`.
 */
export function useGovernanceWrappedErc20Delegates<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'delegates'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'delegates',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'delegates',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useGovernanceWrappedErc20GetPastTotalSupply<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'getPastTotalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'getPastTotalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'getPastTotalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useGovernanceWrappedErc20GetPastVotes<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'getPastVotes'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'getPastVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'getPastVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernanceWrappedErc20GetVotes<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'getVotes'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'getVotes',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'getVotes',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"name"`.
 */
export function useGovernanceWrappedErc20Name<
  TSelectData = ReadContractResult<typeof governanceWrappedErc20ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"nonces"`.
 */
export function useGovernanceWrappedErc20Nonces<
  TSelectData = ReadContractResult<typeof governanceWrappedErc20ABI, 'nonces'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'nonces',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'nonces',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"numCheckpoints"`.
 */
export function useGovernanceWrappedErc20NumCheckpoints<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'numCheckpoints'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'numCheckpoints',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'numCheckpoints',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'numCheckpoints',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernanceWrappedErc20SupportsInterface<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useGovernanceWrappedErc20Symbol<
  TSelectData = ReadContractResult<typeof governanceWrappedErc20ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useGovernanceWrappedErc20TotalSupply<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'totalSupply'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"underlying"`.
 */
export function useGovernanceWrappedErc20Underlying<
  TSelectData = ReadContractResult<
    typeof governanceWrappedErc20ABI,
    'underlying'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof governanceWrappedErc20ABI,
      'underlying',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governanceWrappedErc20ABI,
    functionName: 'underlying',
    ...config,
  } as UseContractReadConfig<
    typeof governanceWrappedErc20ABI,
    'underlying',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__.
 */
export function useGovernanceWrappedErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceWrappedErc20ABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof governanceWrappedErc20ABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governanceWrappedErc20ABI,
    TFunctionName
  >({ abi: governanceWrappedErc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useGovernanceWrappedErc20Approve<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceWrappedErc20ABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceWrappedErc20ABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceWrappedErc20ABI, 'approve'>({
    abi: governanceWrappedErc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useGovernanceWrappedErc20DecreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceWrappedErc20ABI,
          'decreaseAllowance'
        >['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceWrappedErc20ABI,
        'decreaseAllowance'
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governanceWrappedErc20ABI,
    'decreaseAllowance'
  >({
    abi: governanceWrappedErc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"delegate"`.
 */
export function useGovernanceWrappedErc20Delegate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceWrappedErc20ABI,
          'delegate'
        >['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceWrappedErc20ABI,
        'delegate'
      > & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceWrappedErc20ABI, 'delegate'>({
    abi: governanceWrappedErc20ABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useGovernanceWrappedErc20DelegateBySig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceWrappedErc20ABI,
          'delegateBySig'
        >['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceWrappedErc20ABI,
        'delegateBySig'
      > & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governanceWrappedErc20ABI,
    'delegateBySig'
  >({
    abi: governanceWrappedErc20ABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"depositFor"`.
 */
export function useGovernanceWrappedErc20DepositFor<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceWrappedErc20ABI,
          'depositFor'
        >['abi'],
        'depositFor'
      > & { functionName?: 'depositFor' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceWrappedErc20ABI,
        'depositFor'
      > & {
        abi?: never
        functionName?: 'depositFor'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governanceWrappedErc20ABI,
    'depositFor'
  >({
    abi: governanceWrappedErc20ABI,
    functionName: 'depositFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useGovernanceWrappedErc20IncreaseAllowance<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceWrappedErc20ABI,
          'increaseAllowance'
        >['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceWrappedErc20ABI,
        'increaseAllowance'
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governanceWrappedErc20ABI,
    'increaseAllowance'
  >({
    abi: governanceWrappedErc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"initialize"`.
 */
export function useGovernanceWrappedErc20Initialize<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceWrappedErc20ABI,
          'initialize'
        >['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceWrappedErc20ABI,
        'initialize'
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governanceWrappedErc20ABI,
    'initialize'
  >({
    abi: governanceWrappedErc20ABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"permit"`.
 */
export function useGovernanceWrappedErc20Permit<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceWrappedErc20ABI,
          'permit'
        >['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceWrappedErc20ABI,
        'permit'
      > & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceWrappedErc20ABI, 'permit'>({
    abi: governanceWrappedErc20ABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useGovernanceWrappedErc20Transfer<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceWrappedErc20ABI,
          'transfer'
        >['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceWrappedErc20ABI,
        'transfer'
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof governanceWrappedErc20ABI, 'transfer'>({
    abi: governanceWrappedErc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useGovernanceWrappedErc20TransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceWrappedErc20ABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceWrappedErc20ABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governanceWrappedErc20ABI,
    'transferFrom'
  >({
    abi: governanceWrappedErc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useGovernanceWrappedErc20WithdrawTo<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof governanceWrappedErc20ABI,
          'withdrawTo'
        >['abi'],
        'withdrawTo'
      > & { functionName?: 'withdrawTo' }
    : UseContractWriteConfig<
        TMode,
        typeof governanceWrappedErc20ABI,
        'withdrawTo'
      > & {
        abi?: never
        functionName?: 'withdrawTo'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof governanceWrappedErc20ABI,
    'withdrawTo'
  >({
    abi: governanceWrappedErc20ABI,
    functionName: 'withdrawTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__.
 */
export function usePrepareGovernanceWrappedErc20Write<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceWrappedErc20ABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceWrappedErc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceWrappedErc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareGovernanceWrappedErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceWrappedErc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceWrappedErc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceWrappedErc20ABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareGovernanceWrappedErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceWrappedErc20ABI,
      'decreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceWrappedErc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceWrappedErc20ABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareGovernanceWrappedErc20Delegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceWrappedErc20ABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceWrappedErc20ABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceWrappedErc20ABI,
    'delegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareGovernanceWrappedErc20DelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceWrappedErc20ABI,
      'delegateBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceWrappedErc20ABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceWrappedErc20ABI,
    'delegateBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"depositFor"`.
 */
export function usePrepareGovernanceWrappedErc20DepositFor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceWrappedErc20ABI,
      'depositFor'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceWrappedErc20ABI,
    functionName: 'depositFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceWrappedErc20ABI,
    'depositFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareGovernanceWrappedErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceWrappedErc20ABI,
      'increaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceWrappedErc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceWrappedErc20ABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareGovernanceWrappedErc20Initialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceWrappedErc20ABI,
      'initialize'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceWrappedErc20ABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceWrappedErc20ABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareGovernanceWrappedErc20Permit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceWrappedErc20ABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceWrappedErc20ABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceWrappedErc20ABI,
    'permit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareGovernanceWrappedErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceWrappedErc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceWrappedErc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceWrappedErc20ABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareGovernanceWrappedErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceWrappedErc20ABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceWrappedErc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceWrappedErc20ABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareGovernanceWrappedErc20WithdrawTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceWrappedErc20ABI,
      'withdrawTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governanceWrappedErc20ABI,
    functionName: 'withdrawTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceWrappedErc20ABI,
    'withdrawTo'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceWrappedErc20ABI}__.
 */
export function useGovernanceWrappedErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governanceWrappedErc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceWrappedErc20ABI,
    ...config,
  } as UseContractEventConfig<typeof governanceWrappedErc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useGovernanceWrappedErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceWrappedErc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceWrappedErc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof governanceWrappedErc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useGovernanceWrappedErc20DelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceWrappedErc20ABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceWrappedErc20ABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<
    typeof governanceWrappedErc20ABI,
    'DelegateChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useGovernanceWrappedErc20DelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof governanceWrappedErc20ABI,
      'DelegateVotesChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceWrappedErc20ABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<
    typeof governanceWrappedErc20ABI,
    'DelegateVotesChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `eventName` set to `"Initialized"`.
 */
export function useGovernanceWrappedErc20InitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceWrappedErc20ABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceWrappedErc20ABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof governanceWrappedErc20ABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceWrappedErc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useGovernanceWrappedErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceWrappedErc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governanceWrappedErc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof governanceWrappedErc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iGovernanceWrappedErc20ABI}__.
 */
export function useIGovernanceWrappedErc20(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iGovernanceWrappedErc20ABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernanceWrappedErc20ABI}__.
 */
export function useIGovernanceWrappedErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernanceWrappedErc20ABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iGovernanceWrappedErc20ABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernanceWrappedErc20ABI,
    TFunctionName
  >({ abi: iGovernanceWrappedErc20ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernanceWrappedErc20ABI}__ and `functionName` set to `"depositFor"`.
 */
export function useIGovernanceWrappedErc20DepositFor<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernanceWrappedErc20ABI,
          'depositFor'
        >['abi'],
        'depositFor'
      > & { functionName?: 'depositFor' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernanceWrappedErc20ABI,
        'depositFor'
      > & {
        abi?: never
        functionName?: 'depositFor'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernanceWrappedErc20ABI,
    'depositFor'
  >({
    abi: iGovernanceWrappedErc20ABI,
    functionName: 'depositFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernanceWrappedErc20ABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function useIGovernanceWrappedErc20WithdrawTo<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iGovernanceWrappedErc20ABI,
          'withdrawTo'
        >['abi'],
        'withdrawTo'
      > & { functionName?: 'withdrawTo' }
    : UseContractWriteConfig<
        TMode,
        typeof iGovernanceWrappedErc20ABI,
        'withdrawTo'
      > & {
        abi?: never
        functionName?: 'withdrawTo'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iGovernanceWrappedErc20ABI,
    'withdrawTo'
  >({
    abi: iGovernanceWrappedErc20ABI,
    functionName: 'withdrawTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernanceWrappedErc20ABI}__.
 */
export function usePrepareIGovernanceWrappedErc20Write<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernanceWrappedErc20ABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernanceWrappedErc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernanceWrappedErc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernanceWrappedErc20ABI}__ and `functionName` set to `"depositFor"`.
 */
export function usePrepareIGovernanceWrappedErc20DepositFor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernanceWrappedErc20ABI,
      'depositFor'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernanceWrappedErc20ABI,
    functionName: 'depositFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernanceWrappedErc20ABI,
    'depositFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernanceWrappedErc20ABI}__ and `functionName` set to `"withdrawTo"`.
 */
export function usePrepareIGovernanceWrappedErc20WithdrawTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iGovernanceWrappedErc20ABI,
      'withdrawTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernanceWrappedErc20ABI,
    functionName: 'withdrawTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iGovernanceWrappedErc20ABI,
    'withdrawTo'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iPluginSetupABI}__.
 */
export function useIPluginSetup(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iPluginSetupABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPluginSetupABI}__.
 */
export function useIPluginSetupRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iPluginSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPluginSetupABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iPluginSetupABI,
    ...config,
  } as UseContractReadConfig<
    typeof iPluginSetupABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"implementation"`.
 */
export function useIPluginSetupImplementation<
  TSelectData = ReadContractResult<typeof iPluginSetupABI, 'implementation'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iPluginSetupABI,
      'implementation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPluginSetupABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof iPluginSetupABI,
    'implementation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__.
 */
export function useIPluginSetupWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPluginSetupABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iPluginSetupABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPluginSetupABI, TFunctionName>({
    abi: iPluginSetupABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function useIPluginSetupPrepareInstallation<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iPluginSetupABI,
          'prepareInstallation'
        >['abi'],
        'prepareInstallation'
      > & { functionName?: 'prepareInstallation' }
    : UseContractWriteConfig<
        TMode,
        typeof iPluginSetupABI,
        'prepareInstallation'
      > & {
        abi?: never
        functionName?: 'prepareInstallation'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPluginSetupABI, 'prepareInstallation'>(
    {
      abi: iPluginSetupABI,
      functionName: 'prepareInstallation',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function useIPluginSetupPrepareUninstallation<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iPluginSetupABI,
          'prepareUninstallation'
        >['abi'],
        'prepareUninstallation'
      > & { functionName?: 'prepareUninstallation' }
    : UseContractWriteConfig<
        TMode,
        typeof iPluginSetupABI,
        'prepareUninstallation'
      > & {
        abi?: never
        functionName?: 'prepareUninstallation'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iPluginSetupABI,
    'prepareUninstallation'
  >({
    abi: iPluginSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function useIPluginSetupPrepareUpdate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iPluginSetupABI,
          'prepareUpdate'
        >['abi'],
        'prepareUpdate'
      > & { functionName?: 'prepareUpdate' }
    : UseContractWriteConfig<TMode, typeof iPluginSetupABI, 'prepareUpdate'> & {
        abi?: never
        functionName?: 'prepareUpdate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPluginSetupABI, 'prepareUpdate'>({
    abi: iPluginSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__.
 */
export function usePrepareIPluginSetupWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginSetupABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginSetupABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginSetupABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePrepareIPluginSetupPrepareInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iPluginSetupABI,
      'prepareInstallation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPluginSetupABI,
    'prepareInstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function usePrepareIPluginSetupPrepareUninstallation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iPluginSetupABI,
      'prepareUninstallation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPluginSetupABI,
    'prepareUninstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePrepareIPluginSetupPrepareUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginSetupABI, 'prepareUpdate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginSetupABI, 'prepareUpdate'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pluginSetupABI}__.
 */
export function usePluginSetup(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: pluginSetupABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupABI}__.
 */
export function usePluginSetupRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pluginSetupABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupABI,
    ...config,
  } as UseContractReadConfig<typeof pluginSetupABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"implementation"`.
 */
export function usePluginSetupImplementation<
  TSelectData = ReadContractResult<typeof pluginSetupABI, 'implementation'>,
>(
  config: Omit<
    UseContractReadConfig<typeof pluginSetupABI, 'implementation', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof pluginSetupABI,
    'implementation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePluginSetupSupportsInterface<
  TSelectData = ReadContractResult<typeof pluginSetupABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pluginSetupABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pluginSetupABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof pluginSetupABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupABI}__.
 */
export function usePluginSetupWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pluginSetupABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof pluginSetupABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pluginSetupABI, TFunctionName>({
    abi: pluginSetupABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePluginSetupPrepareInstallation<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pluginSetupABI,
          'prepareInstallation'
        >['abi'],
        'prepareInstallation'
      > & { functionName?: 'prepareInstallation' }
    : UseContractWriteConfig<
        TMode,
        typeof pluginSetupABI,
        'prepareInstallation'
      > & {
        abi?: never
        functionName?: 'prepareInstallation'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pluginSetupABI, 'prepareInstallation'>({
    abi: pluginSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function usePluginSetupPrepareUninstallation<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pluginSetupABI,
          'prepareUninstallation'
        >['abi'],
        'prepareUninstallation'
      > & { functionName?: 'prepareUninstallation' }
    : UseContractWriteConfig<
        TMode,
        typeof pluginSetupABI,
        'prepareUninstallation'
      > & {
        abi?: never
        functionName?: 'prepareUninstallation'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof pluginSetupABI,
    'prepareUninstallation'
  >({
    abi: pluginSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePluginSetupPrepareUpdate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof pluginSetupABI,
          'prepareUpdate'
        >['abi'],
        'prepareUpdate'
      > & { functionName?: 'prepareUpdate' }
    : UseContractWriteConfig<TMode, typeof pluginSetupABI, 'prepareUpdate'> & {
        abi?: never
        functionName?: 'prepareUpdate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pluginSetupABI, 'prepareUpdate'>({
    abi: pluginSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupABI}__.
 */
export function usePreparePluginSetupWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareInstallation"`.
 */
export function usePreparePluginSetupPrepareInstallation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupABI, 'prepareInstallation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupABI,
    functionName: 'prepareInstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginSetupABI,
    'prepareInstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareUninstallation"`.
 */
export function usePreparePluginSetupPrepareUninstallation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof pluginSetupABI,
      'prepareUninstallation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupABI,
    functionName: 'prepareUninstallation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof pluginSetupABI,
    'prepareUninstallation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pluginSetupABI}__ and `functionName` set to `"prepareUpdate"`.
 */
export function usePreparePluginSetupPrepareUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pluginSetupABI, 'prepareUpdate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pluginSetupABI,
    functionName: 'prepareUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pluginSetupABI, 'prepareUpdate'>)
}
